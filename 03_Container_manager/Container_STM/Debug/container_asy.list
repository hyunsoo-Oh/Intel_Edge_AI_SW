
container_asy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080078dc  080078dc  000088dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007bd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000070  08007c48  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08007c48  00009524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014734  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  0001d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00020b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5e  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a46e  00000000  00000000  00022c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190ac  00000000  00000000  0003d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec86  00000000  00000000  00056158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000580c  00000000  00000000  000f4e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000fa630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078c4 	.word	0x080078c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080078c4 	.word	0x080078c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <MX_ADC1_Init+0xd0>)
 80005f0:	4a2f      	ldr	r2, [pc, #188]	@ (80006b0 <MX_ADC1_Init+0xd4>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <MX_ADC1_Init+0xd0>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <MX_ADC1_Init+0xd0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000602:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000608:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800060a:	2201      	movs	r2, #1
 800060c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800061e:	4a25      	ldr	r2, [pc, #148]	@ (80006b4 <MX_ADC1_Init+0xd8>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800062a:	2203      	movs	r2, #3
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800063e:	f001 fcc5 	bl	8001fcc <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 ff9a 	bl	8001580 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800064c:	2304      	movs	r3, #4
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000654:	2306      	movs	r3, #6
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4813      	ldr	r0, [pc, #76]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800065e:	f001 fe07 	bl	8002270 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 ff8a 	bl	8001580 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800066c:	2305      	movs	r3, #5
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <MX_ADC1_Init+0xd0>)
 800067a:	f001 fdf9 	bl	8002270 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000684:	f000 ff7c 	bl	8001580 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000688:	2306      	movs	r3, #6
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_ADC1_Init+0xd0>)
 8000696:	f001 fdeb 	bl	8002270 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006a0:	f000 ff6e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <HAL_ADC_MspInit+0xdc>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d157      	bne.n	800078a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b2e      	ldr	r3, [pc, #184]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a26      	ldr	r2, [pc, #152]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <HAL_ADC_MspInit+0xe0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000712:	2370      	movs	r3, #112	@ 0x70
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	481d      	ldr	r0, [pc, #116]	@ (800079c <HAL_ADC_MspInit+0xe4>)
 8000726:	f002 fcd5 	bl	80030d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <HAL_ADC_MspInit+0xec>)
 800072e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000748:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 800074c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000750:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000758:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 800075c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000760:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076e:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000770:	f002 f940 	bl	80029f4 <HAL_DMA_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800077a:	f000 ff01 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	40026410 	.word	0x40026410

080007a8 <delay_us>:
#include "delay.h"

// delay_us를 만드는 함수
void delay_us(uint16_t us, TIM_HandleTypeDef *tim)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(tim, 0);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(tim)) < us);
 80007bc:	bf00      	nop
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3f9      	bcc.n	80007be <delay_us+0x16>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DHT_thres_init>:
#include "dht11.h"


// 온습도 경계값 초기화
void DHT_thres_init(DHT_THRES *dht_thr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	dht_thr->T1 = 25;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2219      	movs	r2, #25
 80007e4:	701a      	strb	r2, [r3, #0]
	dht_thr->T2 = 25;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2219      	movs	r2, #25
 80007ea:	709a      	strb	r2, [r3, #2]
	dht_thr->H1 = 20;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2214      	movs	r2, #20
 80007f0:	705a      	strb	r2, [r3, #1]
	dht_thr->H2 = 20;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2214      	movs	r2, #20
 80007f6:	70da      	strb	r2, [r3, #3]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DHT_parse>:

// 온습도 파싱 함수
void DHT_parse(DHT_THRES *dht_thr, char *recv_data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	char type[3];
	int value = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]

	sscanf(recv_data, "%2s:%d", type, &value);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	f107 020c 	add.w	r2, r7, #12
 800081a:	4925      	ldr	r1, [pc, #148]	@ (80008b0 <DHT_parse+0xac>)
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f005 fb95 	bl	8005f4c <siscanf>

	printf("type : %s\n", type);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4822      	ldr	r0, [pc, #136]	@ (80008b4 <DHT_parse+0xb0>)
 800082a:	f005 fafd 	bl	8005e28 <iprintf>
	printf("value : %d\n", value);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4619      	mov	r1, r3
 8000832:	4821      	ldr	r0, [pc, #132]	@ (80008b8 <DHT_parse+0xb4>)
 8000834:	f005 faf8 	bl	8005e28 <iprintf>

	if (strcmp(type, "T1") == 0)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	491f      	ldr	r1, [pc, #124]	@ (80008bc <DHT_parse+0xb8>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcce 	bl	80001e0 <strcmp>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <DHT_parse+0x50>
		dht_thr->T1 = (uint8_t)value;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	701a      	strb	r2, [r3, #0]
		dht_thr->T2 = (uint8_t)value;
	else if (strcmp(type, "H1") == 0)
		dht_thr->H1	= (uint8_t)value;
	else if (strcmp(type, "H2") == 0)
		dht_thr->H2 = (uint8_t)value;
}
 8000852:	e028      	b.n	80008a6 <DHT_parse+0xa2>
	else if (strcmp(type, "T2") == 0)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4919      	ldr	r1, [pc, #100]	@ (80008c0 <DHT_parse+0xbc>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcc0 	bl	80001e0 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <DHT_parse+0x6c>
		dht_thr->T2 = (uint8_t)value;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	709a      	strb	r2, [r3, #2]
}
 800086e:	e01a      	b.n	80008a6 <DHT_parse+0xa2>
	else if (strcmp(type, "H1") == 0)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4913      	ldr	r1, [pc, #76]	@ (80008c4 <DHT_parse+0xc0>)
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcb2 	bl	80001e0 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <DHT_parse+0x88>
		dht_thr->H1	= (uint8_t)value;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	705a      	strb	r2, [r3, #1]
}
 800088a:	e00c      	b.n	80008a6 <DHT_parse+0xa2>
	else if (strcmp(type, "H2") == 0)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <DHT_parse+0xc4>)
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fca4 	bl	80001e0 <strcmp>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <DHT_parse+0xa2>
		dht_thr->H2 = (uint8_t)value;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	70da      	strb	r2, [r3, #3]
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	080078dc 	.word	0x080078dc
 80008b4:	080078e4 	.word	0x080078e4
 80008b8:	080078f0 	.word	0x080078f0
 80008bc:	080078fc 	.word	0x080078fc
 80008c0:	08007900 	.word	0x08007900
 80008c4:	08007904 	.word	0x08007904
 80008c8:	08007908 	.word	0x08007908

080008cc <dht11Init>:



// DHT11 초기화
void dht11Init(DHT11 *dht, GPIO_TypeDef *port, uint16_t pinNumber, TIM_HandleTypeDef *tim)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4613      	mov	r3, r2
 80008da:	80fb      	strh	r3, [r7, #6]
	// 구조체의 포트와 핀 번호를 설정
	dht->port = port;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	601a      	str	r2, [r3, #0]
	dht->pinNumber = pinNumber;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	88fa      	ldrh	r2, [r7, #6]
 80008e6:	809a      	strh	r2, [r3, #4]
	dht->tim = tim;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	609a      	str	r2, [r3, #8]
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <dht11GpioMode>:

// 포트를 input으로 사용할지, output으로 사용할지 설정해주는 함수
void dht11GpioMode(DHT11 *dht, uint8_t mode)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b088      	sub	sp, #32
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
	// 포트에 대한 구조체 선언 및 초기화 (gpio.c를 보면 참고할 수 있음)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

	if(mode == OUTPUT)
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d111      	bne.n	8000940 <dht11GpioMode+0x46>
	{
		// 아웃풋 설정
		GPIO_InitStruct.Pin = dht->pinNumber;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	889b      	ldrh	r3, [r3, #4]
 8000920:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f107 020c 	add.w	r2, r7, #12
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fbcb 	bl	80030d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 800093e:	e013      	b.n	8000968 <dht11GpioMode+0x6e>
	else if(mode == INPUT)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d110      	bne.n	8000968 <dht11GpioMode+0x6e>
		GPIO_InitStruct.Pin = dht->pinNumber;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	889b      	ldrh	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f107 020c 	add.w	r2, r7, #12
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fbb6 	bl	80030d4 <HAL_GPIO_Init>
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <dht11Read>:

uint8_t dht11Read(DHT11 *dht)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	@ 0x40
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	bool ret = true;
 8000978:	2301      	movs	r3, #1
 800097a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint16_t timeTick = 0; 		// 시간 측정을 위한 변수 초기화
 800097e:	2300      	movs	r3, #0
 8000980:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint8_t pulse[40] = {0};  // 40비트 데이터를 저장할 배열 및 초기화
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2228      	movs	r2, #40	@ 0x28
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fbe4 	bl	8006158 <memset>

	// 온습도 데이터 변수
	uint8_t humValue1 = 0, humValue2 = 0; // 습도
 8000990:	2300      	movs	r3, #0
 8000992:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000996:	2300      	movs	r3, #0
 8000998:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t temValue1 = 0, temValue2 = 0; // 온도
 800099c:	2300      	movs	r3, #0
 800099e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t parityValue = 0;							// 체크썸
 80009a8:	2300      	movs	r3, #0
 80009aa:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// 타이머 시작
	HAL_TIM_Base_Start(dht->tim);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fb70 	bl	8004098 <HAL_TIM_Base_Start>

	// 통신 시작 신호 전송 (MCU signal)
	dht11GpioMode(dht, OUTPUT);											  // GPIO를 출력 모드로 설정
 80009b8:	2101      	movs	r1, #1
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff9d 	bl	80008fa <dht11GpioMode>
	HAL_GPIO_WritePin(dht->port, dht->pinNumber, 0);  // dht에 0을 전송
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	889b      	ldrh	r3, [r3, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	4619      	mov	r1, r3
 80009cc:	f002 fd1e 	bl	800340c <HAL_GPIO_WritePin>
	HAL_Delay(20);																		// 시작 신호 (Low로 유지)
 80009d0:	2014      	movs	r0, #20
 80009d2:	f001 fad7 	bl	8001f84 <HAL_Delay>
	HAL_GPIO_WritePin(dht->port, dht->pinNumber, 1);	// dht에 1을 전송
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	f002 fd13 	bl	800340c <HAL_GPIO_WritePin>
	delay_us(30, dht->tim);																			// 30us 대기
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	4619      	mov	r1, r3
 80009ec:	201e      	movs	r0, #30
 80009ee:	f7ff fedb 	bl	80007a8 <delay_us>
	dht11GpioMode(dht, INPUT);												// GPIO를 입력 모드로 설정
 80009f2:	2100      	movs	r1, #0
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff80 	bl	80008fa <dht11GpioMode>

	// dht11의 응답 신호 대기
	__HAL_TIM_SET_COUNTER(dht->tim, 0);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET) // Low 신호 대기
 8000a04:	e00e      	b.n	8000a24 <dht11Read+0xb4>
	{
		if(__HAL_TIM_GET_COUNTER(dht->tim) > 100)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0e:	2b64      	cmp	r3, #100	@ 0x64
 8000a10:	d908      	bls.n	8000a24 <dht11Read+0xb4>
		{
			printf("Not Low Signal\n\r"); // 타임아웃 오류 출력
 8000a12:	4897      	ldr	r0, [pc, #604]	@ (8000c70 <dht11Read+0x300>)
 8000a14:	f005 fa08 	bl	8005e28 <iprintf>
			ret = false;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			return ret;					  // 타임아웃 오류가 났으면 while문을 탈출
 8000a1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a22:	e120      	b.n	8000c66 <dht11Read+0x2f6>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET) // Low 신호 대기
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	889b      	ldrh	r3, [r3, #4]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4610      	mov	r0, r2
 8000a30:	f002 fcd4 	bl	80033dc <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0e5      	beq.n	8000a06 <dht11Read+0x96>
		}
	}

	__HAL_TIM_SET_COUNTER(dht->tim, 0);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 8000a44:	e00e      	b.n	8000a64 <dht11Read+0xf4>
	{
		if(__HAL_TIM_GET_COUNTER(dht->tim) > 100)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a4e:	2b64      	cmp	r3, #100	@ 0x64
 8000a50:	d908      	bls.n	8000a64 <dht11Read+0xf4>
		{
			printf("Not High Signal\n\r"); // 타임아웃 오류 출력
 8000a52:	4888      	ldr	r0, [pc, #544]	@ (8000c74 <dht11Read+0x304>)
 8000a54:	f005 f9e8 	bl	8005e28 <iprintf>

			// 해결 부분
			ret = false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			return ret;					  // 타임아웃 오류가 났으면 while문을 탈출
 8000a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a62:	e100      	b.n	8000c66 <dht11Read+0x2f6>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4610      	mov	r0, r2
 8000a70:	f002 fcb4 	bl	80033dc <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d0e5      	beq.n	8000a46 <dht11Read+0xd6>
		}
	}

	// 데이터를 수신
	for(uint8_t i = 0; i < 40; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000a80:	e041      	b.n	8000b06 <dht11Read+0x196>
	{
		// start to transmit 1-bit data
		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET);
 8000a82:	bf00      	nop
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	889b      	ldrh	r3, [r3, #4]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4610      	mov	r0, r2
 8000a90:	f002 fca4 	bl	80033dc <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f4      	beq.n	8000a84 <dht11Read+0x114>

		__HAL_TIM_SET_COUNTER(dht->tim, 0);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 8000aa4:	e01f      	b.n	8000ae6 <dht11Read+0x176>
		{
			timeTick = __HAL_TIM_GET_COUNTER(dht->tim);	// high 신호 길이를 측정
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	867b      	strh	r3, [r7, #50]	@ 0x32

			if(timeTick > 20 && timeTick < 30) // 신호 길이가 짧으면 data = 0
 8000ab0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000ab2:	2b14      	cmp	r3, #20
 8000ab4:	d90a      	bls.n	8000acc <dht11Read+0x15c>
 8000ab6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000ab8:	2b1d      	cmp	r3, #29
 8000aba:	d807      	bhi.n	8000acc <dht11Read+0x15c>
			{
				pulse[i] = 0;
 8000abc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000ac0:	3340      	adds	r3, #64	@ 0x40
 8000ac2:	443b      	add	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f803 2c38 	strb.w	r2, [r3, #-56]
 8000aca:	e00c      	b.n	8000ae6 <dht11Read+0x176>
			}
			else if(timeTick > 65 && timeTick < 85) // 신호 길이가 길면 data = 1
 8000acc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000ace:	2b41      	cmp	r3, #65	@ 0x41
 8000ad0:	d909      	bls.n	8000ae6 <dht11Read+0x176>
 8000ad2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000ad4:	2b54      	cmp	r3, #84	@ 0x54
 8000ad6:	d806      	bhi.n	8000ae6 <dht11Read+0x176>
			{
				pulse[i] = 1;
 8000ad8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000adc:	3340      	adds	r3, #64	@ 0x40
 8000ade:	443b      	add	r3, r7
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f803 2c38 	strb.w	r2, [r3, #-56]
		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f002 fc73 	bl	80033dc <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d0d4      	beq.n	8000aa6 <dht11Read+0x136>
	for(uint8_t i = 0; i < 40; i++)
 8000afc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000b00:	3301      	adds	r3, #1
 8000b02:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000b06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000b0a:	2b27      	cmp	r3, #39	@ 0x27
 8000b0c:	d9b9      	bls.n	8000a82 <dht11Read+0x112>
			}
		}
	}

	// 타이머 정지
	HAL_TIM_Base_Stop(dht->tim);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fb1a 	bl	800414c <HAL_TIM_Base_Stop>

	// 배열에 저장된 데이터 처리
	for(uint8_t i = 0; i < 8; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000b1e:	e011      	b.n	8000b44 <dht11Read+0x1d4>
		humValue1 = (humValue1 << 1) + pulse[i];			// 습도 상위 8비트 (정수부)
 8000b20:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b2c:	3340      	adds	r3, #64	@ 0x40
 8000b2e:	443b      	add	r3, r7
 8000b30:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000b34:	4413      	add	r3, r2
 8000b36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t i = 0; i < 8; i++)
 8000b3a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000b44:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d9e9      	bls.n	8000b20 <dht11Read+0x1b0>

	for(uint8_t i = 8; i < 16; i++)
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b52:	e011      	b.n	8000b78 <dht11Read+0x208>
		humValue2 = (humValue2 << 1) + pulse[i];			// 습도 하위 8비트 (실수부)
 8000b54:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b60:	3340      	adds	r3, #64	@ 0x40
 8000b62:	443b      	add	r3, r7
 8000b64:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000b68:	4413      	add	r3, r2
 8000b6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	for(uint8_t i = 8; i < 16; i++)
 8000b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b72:	3301      	adds	r3, #1
 8000b74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d9e9      	bls.n	8000b54 <dht11Read+0x1e4>

	for(uint8_t i = 16; i < 24; i++)
 8000b80:	2310      	movs	r3, #16
 8000b82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000b86:	e011      	b.n	8000bac <dht11Read+0x23c>
		temValue1 = (temValue1 << 1) + pulse[i];			// 온도 상위 8비트 (정수부)
 8000b88:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000b94:	3340      	adds	r3, #64	@ 0x40
 8000b96:	443b      	add	r3, r7
 8000b98:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	for(uint8_t i = 16; i < 24; i++)
 8000ba2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000bac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000bb0:	2b17      	cmp	r3, #23
 8000bb2:	d9e9      	bls.n	8000b88 <dht11Read+0x218>

	for(uint8_t i = 24; i < 32; i++)
 8000bb4:	2318      	movs	r3, #24
 8000bb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000bba:	e011      	b.n	8000be0 <dht11Read+0x270>
		temValue2 = (temValue2 << 1) + pulse[i];			// 온도 상위 8비트 (실수부)
 8000bbc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000bc8:	3340      	adds	r3, #64	@ 0x40
 8000bca:	443b      	add	r3, r7
 8000bcc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for(uint8_t i = 24; i < 32; i++)
 8000bd6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000be0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d9e9      	bls.n	8000bbc <dht11Read+0x24c>

	for(uint8_t i = 32; i < 40; i++)
 8000be8:	2320      	movs	r3, #32
 8000bea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000bee:	e011      	b.n	8000c14 <dht11Read+0x2a4>
		parityValue = (parityValue << 1) + pulse[i];	// 체크썸 8비트
 8000bf0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000bfc:	3340      	adds	r3, #64	@ 0x40
 8000bfe:	443b      	add	r3, r7
 8000c00:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000c04:	4413      	add	r3, r2
 8000c06:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	for(uint8_t i = 32; i < 40; i++)
 8000c0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c0e:	3301      	adds	r3, #1
 8000c10:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000c14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c18:	2b27      	cmp	r3, #39	@ 0x27
 8000c1a:	d9e9      	bls.n	8000bf0 <dht11Read+0x280>


	// 구조체에 온습도 값을 저장
	dht->temperature = temValue1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000c22:	719a      	strb	r2, [r3, #6]
	dht->humidity = humValue1;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000c2a:	71da      	strb	r2, [r3, #7]


	// 데이터 무결성 검증 (정상적인 값이 들어왔는지 체크해봄)
	uint8_t checkSum = humValue1 + humValue2 + temValue1 + temValue2;
 8000c2c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000c30:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000c34:	4413      	add	r3, r2
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c44:	4413      	add	r3, r2
 8000c46:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	if(checkSum != parityValue)
 8000c4a:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8000c4e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d005      	beq.n	8000c62 <dht11Read+0x2f2>
	{
		printf("checkSum Not Value\n\r");
 8000c56:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <dht11Read+0x308>)
 8000c58:	f005 f8e6 	bl	8005e28 <iprintf>
		ret = false;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	return ret;
 8000c62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3740      	adds	r7, #64	@ 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	0800790c 	.word	0x0800790c
 8000c74:	08007920 	.word	0x08007920
 8000c78:	08007934 	.word	0x08007934

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <MX_DMA_Init+0x4c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <MX_DMA_Init+0x4c>)
 8000c8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_DMA_Init+0x4c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2038      	movs	r0, #56	@ 0x38
 8000ca4:	f001 fe6f 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca8:	2038      	movs	r0, #56	@ 0x38
 8000caa:	f001 fe88 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	203a      	movs	r0, #58	@ 0x3a
 8000cb4:	f001 fe67 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cb8:	203a      	movs	r0, #58	@ 0x3a
 8000cba:	f001 fe80 	bl	80029be <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b31      	ldr	r3, [pc, #196]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a30      	ldr	r2, [pc, #192]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a29      	ldr	r2, [pc, #164]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <MX_GPIO_Init+0xe0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000d52:	2200      	movs	r2, #0
 8000d54:	f641 612e 	movw	r1, #7726	@ 0x1e2e
 8000d58:	4815      	ldr	r0, [pc, #84]	@ (8000db0 <MX_GPIO_Init+0xe4>)
 8000d5a:	f002 fb57 	bl	800340c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2130      	movs	r1, #48	@ 0x30
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <MX_GPIO_Init+0xe8>)
 8000d64:	f002 fb52 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC5
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000d68:	f641 632e 	movw	r3, #7726	@ 0x1e2e
 8000d6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <MX_GPIO_Init+0xe4>)
 8000d82:	f002 f9a7 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d86:	2330      	movs	r3, #48	@ 0x30
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_GPIO_Init+0xe8>)
 8000d9e:	f002 f999 	bl	80030d4 <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020400 	.word	0x40020400

08000db8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	@ (8000e0c <MX_I2C1_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <MX_I2C1_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_I2C1_Init+0x50>)
 8000df6:	f002 fb23 	bl	8003440 <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 fbbe 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000134 	.word	0x20000134
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	000186a0 	.word	0x000186a0

08000e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_I2C_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12c      	bne.n	8000e90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <HAL_I2C_MspInit+0x8c>)
 8000e70:	f002 f930 	bl	80030d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <shiftOut1>:
#include <led.h>

void shiftOut1(uint8_t data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--)
 8000eae:	2307      	movs	r3, #7
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	e026      	b.n	8000f02 <shiftOut1+0x5e>
    {
        if (data & (1 << i))
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	fa42 f303 	asr.w	r3, r2, r3
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <shiftOut1+0x2e>
        	SER_HIGH_1();
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eca:	4819      	ldr	r0, [pc, #100]	@ (8000f30 <shiftOut1+0x8c>)
 8000ecc:	f002 fa9e 	bl	800340c <HAL_GPIO_WritePin>
 8000ed0:	e005      	b.n	8000ede <shiftOut1+0x3a>
        else
        	SER_LOW_1();
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed8:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <shiftOut1+0x8c>)
 8000eda:	f002 fa97 	bl	800340c <HAL_GPIO_WritePin>

        SRCLK_HIGH_1();
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <shiftOut1+0x8c>)
 8000ee6:	f002 fa91 	bl	800340c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f001 f84a 	bl	8001f84 <HAL_Delay>
        SRCLK_LOW_1();
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef6:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <shiftOut1+0x8c>)
 8000ef8:	f002 fa88 	bl	800340c <HAL_GPIO_WritePin>
    for (int i = 7; i >= 0; i--)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dad5      	bge.n	8000eb4 <shiftOut1+0x10>
    }

    RCLK_HIGH_1(); // latch
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f0e:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <shiftOut1+0x8c>)
 8000f10:	f002 fa7c 	bl	800340c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 f835 	bl	8001f84 <HAL_Delay>
    RCLK_LOW_1();
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <shiftOut1+0x8c>)
 8000f22:	f002 fa73 	bl	800340c <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020800 	.word	0x40020800

08000f34 <shiftOut2>:

void shiftOut2(uint8_t data)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--)
 8000f3e:	2307      	movs	r3, #7
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e022      	b.n	8000f8a <shiftOut2+0x56>
    {
        if (data & (1 << i))
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	fa42 f303 	asr.w	r3, r2, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <shiftOut2+0x2c>
        	SER_HIGH_2();
 8000f54:	2201      	movs	r2, #1
 8000f56:	2102      	movs	r1, #2
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <shiftOut2+0x80>)
 8000f5a:	f002 fa57 	bl	800340c <HAL_GPIO_WritePin>
 8000f5e:	e004      	b.n	8000f6a <shiftOut2+0x36>
        else
        	SER_LOW_2();
 8000f60:	2200      	movs	r2, #0
 8000f62:	2102      	movs	r1, #2
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <shiftOut2+0x80>)
 8000f66:	f002 fa51 	bl	800340c <HAL_GPIO_WritePin>

        SRCLK_HIGH_2();
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <shiftOut2+0x80>)
 8000f70:	f002 fa4c 	bl	800340c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 f805 	bl	8001f84 <HAL_Delay>
        SRCLK_LOW_2();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <shiftOut2+0x80>)
 8000f80:	f002 fa44 	bl	800340c <HAL_GPIO_WritePin>
    for (int i = 7; i >= 0; i--)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dad9      	bge.n	8000f44 <shiftOut2+0x10>
    }

    RCLK_HIGH_2(); // latch
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <shiftOut2+0x80>)
 8000f96:	f002 fa39 	bl	800340c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fff2 	bl	8001f84 <HAL_Delay>
    RCLK_LOW_2();
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <shiftOut2+0x80>)
 8000fa6:	f002 fa31 	bl	800340c <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <LED1_on>:

void LED1_on(uint8_t cnt)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t on = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 2*cnt-1; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00a      	b.n	8000fe2 <LED1_on+0x2a>
	{
		on = on << 1 | 1;
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 2*cnt-1; i++)
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73bb      	strb	r3, [r7, #14]
 8000fe2:	7bba      	ldrb	r2, [r7, #14]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbee      	blt.n	8000fcc <LED1_on+0x14>
	}

	shiftOut1(on);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff57 	bl	8000ea4 <shiftOut1>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <LED1_off>:

	shiftOut2(on);
}

void LED1_off()
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	shiftOut1(0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff4e 	bl	8000ea4 <shiftOut1>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <LED2_off>:

void LED2_off()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	shiftOut2(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff ff8f 	bl	8000f34 <shiftOut2>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop
     until the end of transmission */
	if(ch == '\n')
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d106      	bne.n	8001038 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800102a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800102e:	2201      	movs	r2, #1
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <__io_putchar+0x34>)
 8001032:	4808      	ldr	r0, [pc, #32]	@ (8001054 <__io_putchar+0x38>)
 8001034:	f004 f86a 	bl	800510c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001038:	1d39      	adds	r1, r7, #4
 800103a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103e:	2201      	movs	r2, #1
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <__io_putchar+0x38>)
 8001042:	f004 f863 	bl	800510c <HAL_UART_Transmit>
}
 8001046:	bf00      	nop
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800794c 	.word	0x0800794c
 8001054:	2000032c 	.word	0x2000032c

08001058 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// (온습도-500ms), (수위, 불꽃-100ms), (전송-500ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM9) // 100ms마다 타이머 인터럽트 발생
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d132      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		adc_readFLAG = 1;
 800106a:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
		dht_readFLAG = (cnt % 5 == 0) ? 1 : 0;
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001078:	fba3 1302 	umull	r1, r3, r3, r2
 800107c:	0899      	lsrs	r1, r3, #2
 800107e:	460b      	mov	r3, r1
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001096:	701a      	strb	r2, [r3, #0]
		trans_FLAG = (cnt % 5 == 0) ? 1 : 0;
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010a0:	fba3 1302 	umull	r1, r3, r3, r2
 80010a4:	0899      	lsrs	r1, r3, #2
 80010a6:	460b      	mov	r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010be:	701a      	strb	r2, [r3, #0]

		cnt++;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010cc:	701a      	strb	r2, [r3, #0]
				fire_timer_running = 0;
				fire_timer_count = 0;
			}
		}
	}
}
 80010ce:	e02d      	b.n	800112c <HAL_TIM_PeriodElapsedCallback+0xd4>
	else if(htim->Instance == TIM4) // 1s마다 타이머 인터럽트 발생
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d128      	bne.n	800112c <HAL_TIM_PeriodElapsedCallback+0xd4>
		second_FLAG = (second_FLAG + 1) % 256;
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	3301      	adds	r3, #1
 80010e2:	425a      	negs	r2, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	bf58      	it	pl
 80010ea:	4253      	negpl	r3, r2
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010f0:	701a      	strb	r2, [r3, #0]
		if(fire_timer_running)
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d017      	beq.n	800112c <HAL_TIM_PeriodElapsedCallback+0xd4>
			fire_timer_count++;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001108:	701a      	strb	r2, [r3, #0]
			if(fire_timer_count >= 3)
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d90b      	bls.n	800112c <HAL_TIM_PeriodElapsedCallback+0xd4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); // 3초 후 가습기 OFF
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800111a:	4810      	ldr	r0, [pc, #64]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800111c:	f002 f976 	bl	800340c <HAL_GPIO_WritePin>
				fire_timer_running = 0;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
				fire_timer_count = 0;
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40014000 	.word	0x40014000
 8001138:	200001a5 	.word	0x200001a5
 800113c:	200001a7 	.word	0x200001a7
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	200001a4 	.word	0x200001a4
 8001148:	200001a6 	.word	0x200001a6
 800114c:	40000800 	.word	0x40000800
 8001150:	200001a8 	.word	0x200001a8
 8001154:	200001a9 	.word	0x200001a9
 8001158:	200001aa 	.word	0x200001aa
 800115c:	40020800 	.word	0x40020800

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b095      	sub	sp, #84	@ 0x54
 8001164:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fe9b 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f9a1 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f7ff fdad 	bl	8000ccc <MX_GPIO_Init>
  MX_DMA_Init();
 8001172:	f7ff fd83 	bl	8000c7c <MX_DMA_Init>
  MX_TIM11_Init();
 8001176:	f000 fc95 	bl	8001aa4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 800117a:	f000 fd8d 	bl	8001c98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800117e:	f7ff fe1b 	bl	8000db8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001182:	f7ff fa2b 	bl	80005dc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001186:	f000 fd5d 	bl	8001c44 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800118a:	f000 fb8b 	bl	80018a4 <MX_TIM3_Init>
  MX_TIM9_Init();
 800118e:	f000 fc4f 	bl	8001a30 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001192:	f000 fbff 	bl	8001994 <MX_TIM4_Init>

    // 사용센서 : 블루투스, 온습도 2개, 선풍기, FAN, 수위센서, 불꽃감지센서, 바 LED

    char trans_msg[55];

    printf("STM32 start\n");
 8001196:	48a4      	ldr	r0, [pc, #656]	@ (8001428 <main+0x2c8>)
 8001198:	f004 feae 	bl	8005ef8 <puts>

    HAL_UART_Receive_DMA(&huart1, recv_data, 6);
 800119c:	2206      	movs	r2, #6
 800119e:	49a3      	ldr	r1, [pc, #652]	@ (800142c <main+0x2cc>)
 80011a0:	48a3      	ldr	r0, [pc, #652]	@ (8001430 <main+0x2d0>)
 80011a2:	f004 f83e 	bl	8005222 <HAL_UART_Receive_DMA>

    DHT_thres_init(&dht_thr); // 온습도 경계값 초기화
 80011a6:	48a3      	ldr	r0, [pc, #652]	@ (8001434 <main+0x2d4>)
 80011a8:	f7ff fb16 	bl	80007d8 <DHT_thres_init>
	dht11Init(&dht1, GPIOB, GPIO_PIN_4, &htim11); // 온습도 초기화
 80011ac:	4ba2      	ldr	r3, [pc, #648]	@ (8001438 <main+0x2d8>)
 80011ae:	2210      	movs	r2, #16
 80011b0:	49a2      	ldr	r1, [pc, #648]	@ (800143c <main+0x2dc>)
 80011b2:	48a3      	ldr	r0, [pc, #652]	@ (8001440 <main+0x2e0>)
 80011b4:	f7ff fb8a 	bl	80008cc <dht11Init>
	dht11Init(&dht2, GPIOB, GPIO_PIN_5, &htim11);
 80011b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001438 <main+0x2d8>)
 80011ba:	2220      	movs	r2, #32
 80011bc:	499f      	ldr	r1, [pc, #636]	@ (800143c <main+0x2dc>)
 80011be:	48a1      	ldr	r0, [pc, #644]	@ (8001444 <main+0x2e4>)
 80011c0:	f7ff fb84 	bl	80008cc <dht11Init>

	HAL_ADC_Start_DMA(&hadc1, adcValue, 3); // 수위센서, 불꽃감지센서 초기화
 80011c4:	2203      	movs	r2, #3
 80011c6:	49a0      	ldr	r1, [pc, #640]	@ (8001448 <main+0x2e8>)
 80011c8:	48a0      	ldr	r0, [pc, #640]	@ (800144c <main+0x2ec>)
 80011ca:	f000 ff43 	bl	8002054 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 선풍기 초기화
 80011ce:	2100      	movs	r1, #0
 80011d0:	489f      	ldr	r0, [pc, #636]	@ (8001450 <main+0x2f0>)
 80011d2:	f003 f89f 	bl	8004314 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim4);	// 1s 주기로 타이머 인터럽트 발생
 80011d6:	489f      	ldr	r0, [pc, #636]	@ (8001454 <main+0x2f4>)
 80011d8:	f002 ffe0 	bl	800419c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);  // 100ms 주기로 타이머 인터럽트 발생
 80011dc:	489e      	ldr	r0, [pc, #632]	@ (8001458 <main+0x2f8>)
 80011de:	f002 ffdd 	bl	800419c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// 수신
		printf("recv : %s\n", recv_data);
 80011e2:	4992      	ldr	r1, [pc, #584]	@ (800142c <main+0x2cc>)
 80011e4:	489d      	ldr	r0, [pc, #628]	@ (800145c <main+0x2fc>)
 80011e6:	f004 fe1f 	bl	8005e28 <iprintf>
		DHT_parse(&dht_thr, recv_data);
 80011ea:	4990      	ldr	r1, [pc, #576]	@ (800142c <main+0x2cc>)
 80011ec:	4891      	ldr	r0, [pc, #580]	@ (8001434 <main+0x2d4>)
 80011ee:	f7ff fb09 	bl	8000804 <DHT_parse>

		// 온습도 경계값 출력
		printf("[thres] T1:%d, H1:%d, T2:%d, H2:%d\n", dht_thr.T1, dht_thr.H1, dht_thr.T2, dht_thr.H2);
 80011f2:	4b90      	ldr	r3, [pc, #576]	@ (8001434 <main+0x2d4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001434 <main+0x2d4>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001434 <main+0x2d4>)
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	4618      	mov	r0, r3
 8001204:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <main+0x2d4>)
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4603      	mov	r3, r0
 800120c:	4894      	ldr	r0, [pc, #592]	@ (8001460 <main+0x300>)
 800120e:	f004 fe0b 	bl	8005e28 <iprintf>


		if(adc_readFLAG)
 8001212:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <main+0x304>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d035      	beq.n	8001288 <main+0x128>
		{
			// 불꽃감지(ADC4), 수위센서(ADC5, ADC6)
			FIRE_value = FIRE_check();
 800121c:	f000 fa00 	bl	8001620 <FIRE_check>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b90      	ldr	r3, [pc, #576]	@ (8001468 <main+0x308>)
 8001226:	801a      	strh	r2, [r3, #0]
			if(FIRE_value >= 500) // 불꽃 감지 됨
 8001228:	4b8f      	ldr	r3, [pc, #572]	@ (8001468 <main+0x308>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001230:	d303      	bcc.n	800123a <main+0xda>
				FIRE_flag = 1;
 8001232:	4b8e      	ldr	r3, [pc, #568]	@ (800146c <main+0x30c>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e002      	b.n	8001240 <main+0xe0>
			else
				FIRE_flag = 0;
 800123a:	4b8c      	ldr	r3, [pc, #560]	@ (800146c <main+0x30c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]



			printf("fire : %4d, flag : %d\r\n", FIRE_value, FIRE_flag);
 8001240:	4b89      	ldr	r3, [pc, #548]	@ (8001468 <main+0x308>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4b89      	ldr	r3, [pc, #548]	@ (800146c <main+0x30c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4888      	ldr	r0, [pc, #544]	@ (8001470 <main+0x310>)
 800124e:	f004 fdeb 	bl	8005e28 <iprintf>


			WATER_Leftvalue = WATER_Leftcheck();
 8001252:	f000 f9cd 	bl	80015f0 <WATER_Leftcheck>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b86      	ldr	r3, [pc, #536]	@ (8001474 <main+0x314>)
 800125c:	801a      	strh	r2, [r3, #0]
			printf("water_Left : %4d\r\n", WATER_Leftvalue);
 800125e:	4b85      	ldr	r3, [pc, #532]	@ (8001474 <main+0x314>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4884      	ldr	r0, [pc, #528]	@ (8001478 <main+0x318>)
 8001266:	f004 fddf 	bl	8005e28 <iprintf>

			WATER_Rightvalue = WATER_Rightcheck();
 800126a:	f000 f9cd 	bl	8001608 <WATER_Rightcheck>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b82      	ldr	r3, [pc, #520]	@ (800147c <main+0x31c>)
 8001274:	801a      	strh	r2, [r3, #0]
			printf("water_right : %4d\r\n", WATER_Rightvalue);
 8001276:	4b81      	ldr	r3, [pc, #516]	@ (800147c <main+0x31c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4880      	ldr	r0, [pc, #512]	@ (8001480 <main+0x320>)
 800127e:	f004 fdd3 	bl	8005e28 <iprintf>

			adc_readFLAG = 0;
 8001282:	4b78      	ldr	r3, [pc, #480]	@ (8001464 <main+0x304>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
		}


		if(FIRE_flag == 1)
 8001288:	4b78      	ldr	r3, [pc, #480]	@ (800146c <main+0x30c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10b      	bne.n	80012a8 <main+0x148>
		{
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); // 가습기 on
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001296:	487b      	ldr	r0, [pc, #492]	@ (8001484 <main+0x324>)
 8001298:	f002 f8b8 	bl	800340c <HAL_GPIO_WritePin>
		    fire_timer_running = 1;                    // 타이머 활성화
 800129c:	4b7a      	ldr	r3, [pc, #488]	@ (8001488 <main+0x328>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
		    fire_timer_count = 0;                      // 타이머 초기화 (다시 3초 측정)
 80012a2:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <main+0x32c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		}


		if(dht_readFLAG)
 80012a8:	4b79      	ldr	r3, [pc, #484]	@ (8001490 <main+0x330>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8086 	beq.w	80013c0 <main+0x260>
		{
			// 측정
			// 온습도 1 (해당 온습도로 선풍기, FAN 동작하도록)
			if(dht11Read(&dht1))
 80012b4:	4862      	ldr	r0, [pc, #392]	@ (8001440 <main+0x2e0>)
 80012b6:	f7ff fb5b 	bl	8000970 <dht11Read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <main+0x172>
			{
				printf("dht1 => Temp : %d C, Hum : %d %%\r\n", dht1.temperature, dht1.humidity);
 80012c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <main+0x2e0>)
 80012c2:	799b      	ldrb	r3, [r3, #6]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <main+0x2e0>)
 80012c8:	79db      	ldrb	r3, [r3, #7]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4871      	ldr	r0, [pc, #452]	@ (8001494 <main+0x334>)
 80012ce:	f004 fdab 	bl	8005e28 <iprintf>
			}
			// 온습도 2 (여기는 그냥 온습도 출력만)
			if(dht11Read(&dht2))
 80012d2:	485c      	ldr	r0, [pc, #368]	@ (8001444 <main+0x2e4>)
 80012d4:	f7ff fb4c 	bl	8000970 <dht11Read>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <main+0x190>
			{
				printf("dht2 => Temp : %d C, Hum : %d %%\r\n", dht2.temperature, dht2.humidity);
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <main+0x2e4>)
 80012e0:	799b      	ldrb	r3, [r3, #6]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4b57      	ldr	r3, [pc, #348]	@ (8001444 <main+0x2e4>)
 80012e6:	79db      	ldrb	r3, [r3, #7]
 80012e8:	461a      	mov	r2, r3
 80012ea:	486b      	ldr	r0, [pc, #428]	@ (8001498 <main+0x338>)
 80012ec:	f004 fd9c 	bl	8005e28 <iprintf>

			// 온도 경계값 (20 ~ 25도), 습도 경계값 (35 ~ 45%)


			// 온도
			if(dht1.temperature > dht_thr.T1 + 2) // 온도가 경계값보다 큰가?
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <main+0x2e0>)
 80012f2:	799b      	ldrb	r3, [r3, #6]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001434 <main+0x2d4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	3302      	adds	r3, #2
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd04      	ble.n	800130a <main+0x1aa>
			{
				PINWHEEL_on(); // 선풍기 ON
 8001300:	f000 f95c 	bl	80015bc <PINWHEEL_on>
				LED1_off();
 8001304:	f7ff fe7b 	bl	8000ffe <LED1_off>
 8001308:	e02b      	b.n	8001362 <main+0x202>
			}
			else if(dht1.temperature < dht_thr.T1 - 2) // 온도가 경계값보다 낮은가?
 800130a:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <main+0x2e0>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	461a      	mov	r2, r3
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <main+0x2d4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b02      	subs	r3, #2
 8001316:	429a      	cmp	r2, r3
 8001318:	da1c      	bge.n	8001354 <main+0x1f4>
			{
				PINWHEEL_off(); // 선풍기 off
 800131a:	f000 f95d 	bl	80015d8 <PINWHEEL_off>
//					cnt = 0;
//					led_step = (led_step % 4) + 1;  // 1단 ~ 4단
//
//					LED1_on(led_step); // LED ON (히터)
//				}
				if(second_FLAG != led_update_time)
 800131e:	4b5f      	ldr	r3, [pc, #380]	@ (800149c <main+0x33c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <main+0x340>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d01a      	beq.n	8001362 <main+0x202>
				{
					led_update_time = second_FLAG; // 현재의 초로 초기화
 800132c:	4b5b      	ldr	r3, [pc, #364]	@ (800149c <main+0x33c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b5b      	ldr	r3, [pc, #364]	@ (80014a0 <main+0x340>)
 8001334:	701a      	strb	r2, [r3, #0]
					led_step = (led_step % 4) + 1;  // 1단 ~ 4단
 8001336:	4b5b      	ldr	r3, [pc, #364]	@ (80014a4 <main+0x344>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <main+0x344>)
 8001346:	701a      	strb	r2, [r3, #0]

					LED1_on(led_step); // LED ON (히터)
 8001348:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <main+0x344>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe33 	bl	8000fb8 <LED1_on>
 8001352:	e006      	b.n	8001362 <main+0x202>
				}
			}
			else
			{
				LED1_off(); // LED OFF (히터)
 8001354:	f7ff fe53 	bl	8000ffe <LED1_off>
				PINWHEEL_off(); // 선풍기 off
 8001358:	f000 f93e 	bl	80015d8 <PINWHEEL_off>
				led_step = 0;
 800135c:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <main+0x344>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
			}



			// 습도
			if(dht1.humidity > dht_thr.H1 + 10)
 8001362:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <main+0x2e0>)
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	461a      	mov	r2, r3
 8001368:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <main+0x2d4>)
 800136a:	785b      	ldrb	r3, [r3, #1]
 800136c:	330a      	adds	r3, #10
 800136e:	429a      	cmp	r2, r3
 8001370:	dd08      	ble.n	8001384 <main+0x224>
			{
				FAN_on(); // FAN ON
 8001372:	f000 f90b 	bl	800158c <FAN_on>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); // 가습기 OFF
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137c:	4841      	ldr	r0, [pc, #260]	@ (8001484 <main+0x324>)
 800137e:	f002 f845 	bl	800340c <HAL_GPIO_WritePin>
 8001382:	e018      	b.n	80013b6 <main+0x256>
			}
			else if(dht1.humidity < dht_thr.H1 - 5)
 8001384:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <main+0x2e0>)
 8001386:	79db      	ldrb	r3, [r3, #7]
 8001388:	461a      	mov	r2, r3
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <main+0x2d4>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	3b05      	subs	r3, #5
 8001390:	429a      	cmp	r2, r3
 8001392:	da08      	bge.n	80013a6 <main+0x246>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); // 가습기 ON
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800139a:	483a      	ldr	r0, [pc, #232]	@ (8001484 <main+0x324>)
 800139c:	f002 f836 	bl	800340c <HAL_GPIO_WritePin>
				FAN_off(); // FAN OFF
 80013a0:	f000 f900 	bl	80015a4 <FAN_off>
 80013a4:	e007      	b.n	80013b6 <main+0x256>
			}
			else
			{
				FAN_off(); // FAN OFF
 80013a6:	f000 f8fd 	bl	80015a4 <FAN_off>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); // 가습기 OFF
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b0:	4834      	ldr	r0, [pc, #208]	@ (8001484 <main+0x324>)
 80013b2:	f002 f82b 	bl	800340c <HAL_GPIO_WritePin>
			}


			LED2_off();
 80013b6:	f7ff fe29 	bl	800100c <LED2_off>
			dht_readFLAG = 0; // 새로운 온습도 값을 받아올 수 있게
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <main+0x330>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(2000);




		if(trans_FLAG)
 80013c0:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <main+0x348>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f43f af0b 	beq.w	80011e2 <main+0x82>
		{
			// 블루투스 송신 : stm -> 라즈베리파이
			sprintf(trans_msg, "T1:%2d, H1:%2d, T2:%2d, H2:%2d, F:%d, LW:%4d, RW:%4d\n",
					dht1.temperature, dht1.humidity, dht2.temperature, dht2.humidity, FIRE_flag, WATER_Leftvalue, WATER_Rightvalue);
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <main+0x2e0>)
 80013ce:	799b      	ldrb	r3, [r3, #6]
			sprintf(trans_msg, "T1:%2d, H1:%2d, T2:%2d, H2:%2d, F:%d, LW:%4d, RW:%4d\n",
 80013d0:	461e      	mov	r6, r3
					dht1.temperature, dht1.humidity, dht2.temperature, dht2.humidity, FIRE_flag, WATER_Leftvalue, WATER_Rightvalue);
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <main+0x2e0>)
 80013d4:	79db      	ldrb	r3, [r3, #7]
			sprintf(trans_msg, "T1:%2d, H1:%2d, T2:%2d, H2:%2d, F:%d, LW:%4d, RW:%4d\n",
 80013d6:	469c      	mov	ip, r3
					dht1.temperature, dht1.humidity, dht2.temperature, dht2.humidity, FIRE_flag, WATER_Leftvalue, WATER_Rightvalue);
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <main+0x2e4>)
 80013da:	799b      	ldrb	r3, [r3, #6]
			sprintf(trans_msg, "T1:%2d, H1:%2d, T2:%2d, H2:%2d, F:%d, LW:%4d, RW:%4d\n",
 80013dc:	461a      	mov	r2, r3
					dht1.temperature, dht1.humidity, dht2.temperature, dht2.humidity, FIRE_flag, WATER_Leftvalue, WATER_Rightvalue);
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <main+0x2e4>)
 80013e0:	79db      	ldrb	r3, [r3, #7]
			sprintf(trans_msg, "T1:%2d, H1:%2d, T2:%2d, H2:%2d, F:%d, LW:%4d, RW:%4d\n",
 80013e2:	4619      	mov	r1, r3
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <main+0x30c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461c      	mov	r4, r3
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <main+0x314>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	461d      	mov	r5, r3
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <main+0x31c>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	4638      	mov	r0, r7
 80013f6:	9304      	str	r3, [sp, #16]
 80013f8:	9503      	str	r5, [sp, #12]
 80013fa:	9402      	str	r4, [sp, #8]
 80013fc:	9101      	str	r1, [sp, #4]
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	4663      	mov	r3, ip
 8001402:	4632      	mov	r2, r6
 8001404:	4929      	ldr	r1, [pc, #164]	@ (80014ac <main+0x34c>)
 8001406:	f004 fd7f 	bl	8005f08 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)trans_msg, strlen(trans_msg), 100);
 800140a:	463b      	mov	r3, r7
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fef1 	bl	80001f4 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	4639      	mov	r1, r7
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <main+0x2d0>)
 800141c:	f003 fe76 	bl	800510c <HAL_UART_Transmit>

			trans_FLAG = 0;
 8001420:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <main+0x348>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
		printf("recv : %s\n", recv_data);
 8001426:	e6dc      	b.n	80011e2 <main+0x82>
 8001428:	08007950 	.word	0x08007950
 800142c:	20000000 	.word	0x20000000
 8001430:	200002e4 	.word	0x200002e4
 8001434:	200001a0 	.word	0x200001a0
 8001438:	2000029c 	.word	0x2000029c
 800143c:	40020400 	.word	0x40020400
 8001440:	20000188 	.word	0x20000188
 8001444:	20000194 	.word	0x20000194
 8001448:	200001b0 	.word	0x200001b0
 800144c:	2000008c 	.word	0x2000008c
 8001450:	200001c4 	.word	0x200001c4
 8001454:	2000020c 	.word	0x2000020c
 8001458:	20000254 	.word	0x20000254
 800145c:	0800795c 	.word	0x0800795c
 8001460:	08007968 	.word	0x08007968
 8001464:	200001a5 	.word	0x200001a5
 8001468:	200001b8 	.word	0x200001b8
 800146c:	200001b6 	.word	0x200001b6
 8001470:	0800798c 	.word	0x0800798c
 8001474:	200001ba 	.word	0x200001ba
 8001478:	080079a4 	.word	0x080079a4
 800147c:	200001bc 	.word	0x200001bc
 8001480:	080079b8 	.word	0x080079b8
 8001484:	40020800 	.word	0x40020800
 8001488:	200001a9 	.word	0x200001a9
 800148c:	200001aa 	.word	0x200001aa
 8001490:	200001a4 	.word	0x200001a4
 8001494:	080079cc 	.word	0x080079cc
 8001498:	080079f0 	.word	0x080079f0
 800149c:	200001a8 	.word	0x200001a8
 80014a0:	200001ab 	.word	0x200001ab
 80014a4:	200001ac 	.word	0x200001ac
 80014a8:	200001a6 	.word	0x200001a6
 80014ac:	08007a14 	.word	0x08007a14

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 fe4a 	bl	8006158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <SystemClock_Config+0xc8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <SystemClock_Config+0xc8>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <SystemClock_Config+0xc8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <SystemClock_Config+0xcc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <SystemClock_Config+0xcc>)
 80014fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <SystemClock_Config+0xcc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001520:	2308      	movs	r3, #8
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f8c7 	bl	80036c8 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001540:	f000 f81e 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2103      	movs	r1, #3
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fb29 	bl	8003bb8 <HAL_RCC_ClockConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800156c:	f000 f808 	bl	8001580 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	3750      	adds	r7, #80	@ 0x50
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <FAN_on>:
#include <sensor.h>

// FAN
void FAN_on()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET); // FAN on
 8001590:	2201      	movs	r2, #1
 8001592:	2120      	movs	r1, #32
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <FAN_on+0x14>)
 8001596:	f001 ff39 	bl	800340c <HAL_GPIO_WritePin>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020800 	.word	0x40020800

080015a4 <FAN_off>:

void FAN_off()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET); // FAN off
 80015a8:	2200      	movs	r2, #0
 80015aa:	2120      	movs	r1, #32
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <FAN_off+0x14>)
 80015ae:	f001 ff2d 	bl	800340c <HAL_GPIO_WritePin>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020800 	.word	0x40020800

080015bc <PINWHEEL_on>:

// 선풍기
void PINWHEEL_on()
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 1000;;
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <PINWHEEL_on+0x18>)
 80015c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40000400 	.word	0x40000400

080015d8 <PINWHEEL_off>:

void PINWHEEL_off()
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <PINWHEEL_off+0x14>)
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40000400 	.word	0x40000400

080015f0 <WATER_Leftcheck>:

// 수위센서 값
uint16_t WATER_Leftcheck()
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	return adcValue[1];
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <WATER_Leftcheck+0x14>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	b29b      	uxth	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	200001b0 	.word	0x200001b0

08001608 <WATER_Rightcheck>:

uint16_t WATER_Rightcheck()
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	return adcValue[2];
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <WATER_Rightcheck+0x14>)
 800160e:	889b      	ldrh	r3, [r3, #4]
 8001610:	b29b      	uxth	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	200001b0 	.word	0x200001b0

08001620 <FIRE_check>:

// 불꽃센서 값
uint16_t FIRE_check()
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	return adcValue[0];
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <FIRE_check+0x14>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	200001b0 	.word	0x200001b0

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <NMI_Handler+0x4>

08001690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f000 fc31 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016ee:	f002 fec1 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000254 	.word	0x20000254

080016fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <TIM4_IRQHandler+0x10>)
 8001702:	f002 feb7 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000020c 	.word	0x2000020c

08001710 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA2_Stream0_IRQHandler+0x10>)
 8001716:	f001 fa73 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000d4 	.word	0x200000d4

08001724 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA2_Stream2_IRQHandler+0x10>)
 800172a:	f001 fa69 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000374 	.word	0x20000374

08001738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174a:	f3af 8000 	nop.w
 800174e:	4601      	mov	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
  }

  return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc45 	bl	800101c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
  }
  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:

int _isatty(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	@ (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f004 fcd6 	bl	80061f4 <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20020000 	.word	0x20020000
 8001874:	00000400 	.word	0x00000400
 8001878:	200001c0 	.word	0x200001c0
 800187c:	20000528 	.word	0x20000528

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	@ 0x38
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001990 <MX_TIM3_Init+0xec>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b26      	ldr	r3, [pc, #152]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fc:	4823      	ldr	r0, [pc, #140]	@ (800198c <MX_TIM3_Init+0xe8>)
 80018fe:	f002 fb7b 	bl	8003ff8 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001908:	f7ff fe3a 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001916:	4619      	mov	r1, r3
 8001918:	481c      	ldr	r0, [pc, #112]	@ (800198c <MX_TIM3_Init+0xe8>)
 800191a:	f002 ff5d 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001924:	f7ff fe2c 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001928:	4818      	ldr	r0, [pc, #96]	@ (800198c <MX_TIM3_Init+0xe8>)
 800192a:	f002 fc99 	bl	8004260 <HAL_TIM_PWM_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001934:	f7ff fe24 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4619      	mov	r1, r3
 8001946:	4811      	ldr	r0, [pc, #68]	@ (800198c <MX_TIM3_Init+0xe8>)
 8001948:	f003 fb0e 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001952:	f7ff fe15 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001956:	2360      	movs	r3, #96	@ 0x60
 8001958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM3_Init+0xe8>)
 800196e:	f002 fe71 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001978:	f7ff fe02 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM3_Init+0xe8>)
 800197e:	f000 f927 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	@ 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001c4 	.word	0x200001c4
 8001990:	40000400 	.word	0x40000400

08001994 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019b2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <MX_TIM4_Init+0x98>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019b8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80019c4:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019d8:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019da:	f002 fb0d 	bl	8003ff8 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80019e4:	f7ff fdcc 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <MX_TIM4_Init+0x94>)
 80019f6:	f002 feef 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001a00:	f7ff fdbe 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_TIM4_Init+0x94>)
 8001a12:	f003 faa9 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001a1c:	f7ff fdb0 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000020c 	.word	0x2000020c
 8001a2c:	40000800 	.word	0x40000800

08001a30 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a44:	4a16      	ldr	r2, [pc, #88]	@ (8001aa0 <MX_TIM9_Init+0x70>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a4a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a6a:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a6c:	f002 fac4 	bl	8003ff8 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f7ff fd83 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <MX_TIM9_Init+0x6c>)
 8001a86:	f002 fea7 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001a90:	f7ff fd76 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000254 	.word	0x20000254
 8001aa0:	40014000 	.word	0x40014000

08001aa4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <MX_TIM11_Init+0x44>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001ab0:	2263      	movs	r2, #99	@ 0x63
 8001ab2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_TIM11_Init+0x40>)
 8001ad0:	f002 fa92 	bl	8003ff8 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ada:	f7ff fd51 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000029c 	.word	0x2000029c
 8001ae8:	40014800 	.word	0x40014800

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a30      	ldr	r2, [pc, #192]	@ (8001bbc <HAL_TIM_Base_MspInit+0xd0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001b1a:	e04a      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a28      	ldr	r2, [pc, #160]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d116      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201e      	movs	r0, #30
 8001b48:	f000 ff1d 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b4c:	201e      	movs	r0, #30
 8001b4e:	f000 ff36 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001b52:	e02e      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM9)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d116      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2018      	movs	r0, #24
 8001b80:	f000 ff01 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b84:	2018      	movs	r0, #24
 8001b86:	f000 ff1a 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001b8a:	e012      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM11)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_TIM_Base_MspInit+0xe0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10d      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40014000 	.word	0x40014000
 8001bcc:	40014800 	.word	0x40014800

08001bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <HAL_TIM_MspPostInit+0x68>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11d      	bne.n	8001c2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_TIM_MspPostInit+0x6c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_TIM_MspPostInit+0x6c>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_TIM_MspPostInit+0x6c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0e:	2340      	movs	r3, #64	@ 0x40
 8001c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <HAL_TIM_MspPostInit+0x70>)
 8001c2a:	f001 fa53 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020800 	.word	0x40020800

08001c44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <MX_USART1_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	f003 f9f6 	bl	800506c <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f7ff fc7b 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002e4 	.word	0x200002e4
 8001c94:	40011000 	.word	0x40011000

08001c98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <MX_USART2_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f003 f9cc 	bl	800506c <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f7ff fc51 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000032c 	.word	0x2000032c
 8001ce8:	40004400 	.word	0x40004400

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	@ 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	@ (8001e34 <HAL_UART_MspInit+0x148>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d15c      	bne.n	8001dc8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b49      	ldr	r3, [pc, #292]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b46      	ldr	r3, [pc, #280]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a41      	ldr	r2, [pc, #260]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4836      	ldr	r0, [pc, #216]	@ (8001e3c <HAL_UART_MspInit+0x150>)
 8001d64:	f001 f9b6 	bl	80030d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d68:	4b35      	ldr	r3, [pc, #212]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d6a:	4a36      	ldr	r2, [pc, #216]	@ (8001e44 <HAL_UART_MspInit+0x158>)
 8001d6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d6e:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d74:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d76:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d82:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d88:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001daa:	4825      	ldr	r0, [pc, #148]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001dac:	f000 fe22 	bl	80029f4 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001db6:	f7ff fbe3 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <HAL_UART_MspInit+0x154>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc6:	e030      	b.n	8001e2a <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <HAL_UART_MspInit+0x15c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12b      	bne.n	8001e2a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_UART_MspInit+0x14c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <HAL_UART_MspInit+0x150>)
 8001e26:	f001 f955 	bl	80030d4 <HAL_GPIO_Init>
}
 8001e2a:	bf00      	nop
 8001e2c:	3730      	adds	r7, #48	@ 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	20000374 	.word	0x20000374
 8001e44:	40026440 	.word	0x40026440
 8001e48:	40004400 	.word	0x40004400

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e50:	f7ff fd16 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f004 f9c1 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f96f 	bl	8001160 <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e90:	08007bd8 	.word	0x08007bd8
  ldr r2, =_sbss
 8001e94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e98:	20000524 	.word	0x20000524

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 fd51 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fbb0 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd69 	bl	80029da <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 fd31 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000010 	.word	0x20000010
 8001f68:	200003d4 	.word	0x200003d4

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200003d4 	.word	0x200003d4

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff ffee 	bl	8001f6c <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001faa:	bf00      	nop
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000010 	.word	0x20000010

08001fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e033      	b.n	800204a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fb64 	bl	80006b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002012:	f023 0302 	bic.w	r3, r3, #2
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa58 	bl	80024d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
 800203a:	e001      	b.n	8002040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Start_DMA+0x1e>
 800206e:	2302      	movs	r3, #2
 8002070:	e0ce      	b.n	8002210 <HAL_ADC_Start_DMA+0x1bc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d018      	beq.n	80020ba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_ADC_Start_DMA+0x1c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5f      	ldr	r2, [pc, #380]	@ (800221c <HAL_ADC_Start_DMA+0x1c8>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9a      	lsrs	r2, r3, #18
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c8:	d107      	bne.n	80020da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 8086 	bne.w	80021f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002114:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002128:	d106      	bne.n	8002138 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	f023 0206 	bic.w	r2, r3, #6
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
 8002136:	e002      	b.n	800213e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_ADC_Start_DMA+0x1cc>)
 8002148:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	4a35      	ldr	r2, [pc, #212]	@ (8002224 <HAL_ADC_Start_DMA+0x1d0>)
 8002150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	4a34      	ldr	r2, [pc, #208]	@ (8002228 <HAL_ADC_Start_DMA+0x1d4>)
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215e:	4a33      	ldr	r2, [pc, #204]	@ (800222c <HAL_ADC_Start_DMA+0x1d8>)
 8002160:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800216a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800217a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800218a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	334c      	adds	r3, #76	@ 0x4c
 8002196:	4619      	mov	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f000 fcd8 	bl	8002b50 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10f      	bne.n	80021cc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d129      	bne.n	800220e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	e020      	b.n	800220e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_ADC_Start_DMA+0x1dc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d11b      	bne.n	800220e <HAL_ADC_Start_DMA+0x1ba>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d114      	bne.n	800220e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e00b      	b.n	800220e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000008 	.word	0x20000008
 800221c:	431bde83 	.word	0x431bde83
 8002220:	40012300 	.word	0x40012300
 8002224:	080026cd 	.word	0x080026cd
 8002228:	08002787 	.word	0x08002787
 800222c:	080027a3 	.word	0x080027a3
 8002230:	40012000 	.word	0x40012000

08002234 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1c>
 8002288:	2302      	movs	r3, #2
 800228a:	e113      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x244>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d925      	bls.n	80022e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68d9      	ldr	r1, [r3, #12]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	3b1e      	subs	r3, #30
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43da      	mvns	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	400a      	ands	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68d9      	ldr	r1, [r3, #12]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	4603      	mov	r3, r0
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4403      	add	r3, r0
 80022da:	3b1e      	subs	r3, #30
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	e022      	b.n	800232e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6919      	ldr	r1, [r3, #16]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	2207      	movs	r2, #7
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6919      	ldr	r1, [r3, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	4603      	mov	r3, r0
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4403      	add	r3, r0
 8002324:	409a      	lsls	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b06      	cmp	r3, #6
 8002334:	d824      	bhi.n	8002380 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b05      	subs	r3, #5
 8002348:	221f      	movs	r2, #31
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	400a      	ands	r2, r1
 8002356:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b05      	subs	r3, #5
 8002372:	fa00 f203 	lsl.w	r2, r0, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34
 800237e:	e04c      	b.n	800241a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d824      	bhi.n	80023d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b23      	subs	r3, #35	@ 0x23
 800239a:	221f      	movs	r2, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43da      	mvns	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	400a      	ands	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b23      	subs	r3, #35	@ 0x23
 80023c4:	fa00 f203 	lsl.w	r2, r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d0:	e023      	b.n	800241a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b41      	subs	r3, #65	@ 0x41
 80023e4:	221f      	movs	r2, #31
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b41      	subs	r3, #65	@ 0x41
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241a:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <HAL_ADC_ConfigChannel+0x250>)
 800241c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a28      	ldr	r2, [pc, #160]	@ (80024c4 <HAL_ADC_ConfigChannel+0x254>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d10f      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1d8>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b12      	cmp	r3, #18
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <HAL_ADC_ConfigChannel+0x254>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12b      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x23a>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_ADC_ConfigChannel+0x258>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_ADC_ConfigChannel+0x1f4>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b11      	cmp	r3, #17
 8002462:	d122      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <HAL_ADC_ConfigChannel+0x258>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_ADC_ConfigChannel+0x25c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_ADC_ConfigChannel+0x260>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9a      	lsrs	r2, r3, #18
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40012300 	.word	0x40012300
 80024c4:	40012000 	.word	0x40012000
 80024c8:	10000012 	.word	0x10000012
 80024cc:	20000008 	.word	0x20000008
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <ADC_Init+0x1f0>)
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	021a      	lsls	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800252c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	4a58      	ldr	r2, [pc, #352]	@ (80026c8 <ADC_Init+0x1f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800257a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800259c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e00f      	b.n	80025d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0202 	bic.w	r2, r2, #2
 80025e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	005a      	lsls	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800260e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800261e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	3b01      	subs	r3, #1
 800262c:	035a      	lsls	r2, r3, #13
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e007      	b.n	8002648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002646:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	3b01      	subs	r3, #1
 8002664:	051a      	lsls	r2, r3, #20
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800267c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800268a:	025a      	lsls	r2, r3, #9
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	029a      	lsls	r2, r3, #10
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40012300 	.word	0x40012300
 80026c8:	0f000001 	.word	0x0f000001

080026cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d13c      	bne.n	8002760 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12b      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d127      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	d119      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0220 	bic.w	r2, r2, #32
 8002732:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fd6b 	bl	8002234 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800275e:	e00e      	b.n	800277e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fd75 	bl	800225c <HAL_ADC_ErrorCallback>
}
 8002772:	e004      	b.n	800277e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fd57 	bl	8002248 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2240      	movs	r2, #64	@ 0x40
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fd4a 	bl	800225c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff8e 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff29 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff3e 	bl	8002818 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff8e 	bl	80028c4 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5d 	bl	8002870 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff31 	bl	8002834 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fab4 	bl	8001f6c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e099      	b.n	8002b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	e00f      	b.n	8002a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff fa9b 	bl	8001f6c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d908      	bls.n	8002a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e078      	b.n	8002b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e8      	bne.n	8002a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_DMA_Init+0x158>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d117      	bne.n	8002b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa6f 	bl	8002fdc <DMA_CheckFifoParam>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b12:	2301      	movs	r3, #1
 8002b14:	e016      	b.n	8002b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa26 	bl	8002f70 <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	223f      	movs	r2, #63	@ 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f010803f 	.word	0xf010803f

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Start_IT+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e040      	b.n	8002bf8 <HAL_DMA_Start_IT+0xa8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d12f      	bne.n	8002bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f9b8 	bl	8002f14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	223f      	movs	r2, #63	@ 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0216 	orr.w	r2, r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e48 <HAL_DMA_IRQHandler+0x248>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a8e      	ldr	r2, [pc, #568]	@ (8002e4c <HAL_DMA_IRQHandler+0x24c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01a      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	2208      	movs	r2, #8
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2201      	movs	r2, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	2210      	movs	r2, #16
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d043      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03c      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
 8002d2e:	e01f      	b.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e016      	b.n	8002d70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0208 	bic.w	r2, r2, #8
 8002d5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	2220      	movs	r2, #32
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 808f 	beq.w	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8087 	beq.w	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	2220      	movs	r2, #32
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d136      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0216 	bic.w	r2, r2, #22
 8002db8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_DMA_IRQHandler+0x1da>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	223f      	movs	r2, #63	@ 0x3f
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d07e      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
        }
        return;
 8002e16:	e079      	b.n	8002f0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e02c      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
 8002e46:	bf00      	nop
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e01e      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0210 	bic.w	r2, r2, #16
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d032      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d307      	bcc.n	8002ee8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f2      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x2cc>
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ee8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
 8002f0a:	e000      	b.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f0c:	bf00      	nop
    }
  }
}
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b40      	cmp	r3, #64	@ 0x40
 8002f40:	d108      	bne.n	8002f54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f52:	e007      	b.n	8002f64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	3b10      	subs	r3, #16
 8002f80:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d909      	bls.n	8002fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb0:	e007      	b.n	8002fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	aaaaaaab 	.word	0xaaaaaaab
 8002fd8:	08007a70 	.word	0x08007a70

08002fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d856      	bhi.n	80030aa <DMA_CheckFifoParam+0xce>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <DMA_CheckFifoParam+0x28>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	08003027 	.word	0x08003027
 800300c:	08003015 	.word	0x08003015
 8003010:	080030ab 	.word	0x080030ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d046      	beq.n	80030ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e043      	b.n	80030ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800302e:	d140      	bne.n	80030b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e03d      	b.n	80030b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303e:	d121      	bne.n	8003084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d837      	bhi.n	80030b6 <DMA_CheckFifoParam+0xda>
 8003046:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <DMA_CheckFifoParam+0x70>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003063 	.word	0x08003063
 8003054:	0800305d 	.word	0x0800305d
 8003058:	08003075 	.word	0x08003075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e030      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d025      	beq.n	80030ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003072:	e022      	b.n	80030ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800307c:	d11f      	bne.n	80030be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003082:	e01c      	b.n	80030be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d903      	bls.n	8003092 <DMA_CheckFifoParam+0xb6>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d003      	beq.n	8003098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003090:	e018      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      break;
 8003096:	e015      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00e      	beq.n	80030c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e00b      	b.n	80030c2 <DMA_CheckFifoParam+0xe6>
      break;
 80030aa:	bf00      	nop
 80030ac:	e00a      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e008      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e006      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
    }
  } 
  
  return status; 
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e159      	b.n	80033a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 8148 	bne.w	800339e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d005      	beq.n	8003126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	2b02      	cmp	r3, #2
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d017      	beq.n	80031c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d123      	bne.n	8003218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a2 	beq.w	800339e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003268:	6453      	str	r3, [r2, #68]	@ 0x44
 800326a:	4b54      	ldr	r3, [pc, #336]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a52      	ldr	r2, [pc, #328]	@ (80033c0 <HAL_GPIO_Init+0x2ec>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a49      	ldr	r2, [pc, #292]	@ (80033c4 <HAL_GPIO_Init+0x2f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x202>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	@ (80033c8 <HAL_GPIO_Init+0x2f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x1fe>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a47      	ldr	r2, [pc, #284]	@ (80033cc <HAL_GPIO_Init+0x2f8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x1fa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a46      	ldr	r2, [pc, #280]	@ (80033d0 <HAL_GPIO_Init+0x2fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x1f6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a45      	ldr	r2, [pc, #276]	@ (80033d4 <HAL_GPIO_Init+0x300>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x1f2>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d6:	2300      	movs	r3, #0
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	@ (80033c0 <HAL_GPIO_Init+0x2ec>)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b38      	ldr	r3, [pc, #224]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a24      	ldr	r2, [pc, #144]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334a:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336e:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003398:	4a0f      	ldr	r2, [pc, #60]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f aea2 	bls.w	80030f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	@ 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003428:	e003      	b.n	8003432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e12b      	b.n	80036aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fcd4 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034a4:	f000 fd80 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 80034a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a81      	ldr	r2, [pc, #516]	@ (80036b4 <HAL_I2C_Init+0x274>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d807      	bhi.n	80034c4 <HAL_I2C_Init+0x84>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a80      	ldr	r2, [pc, #512]	@ (80036b8 <HAL_I2C_Init+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bf94      	ite	ls
 80034bc:	2301      	movls	r3, #1
 80034be:	2300      	movhi	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e006      	b.n	80034d2 <HAL_I2C_Init+0x92>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a7d      	ldr	r2, [pc, #500]	@ (80036bc <HAL_I2C_Init+0x27c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0e7      	b.n	80036aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a78      	ldr	r2, [pc, #480]	@ (80036c0 <HAL_I2C_Init+0x280>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a6a      	ldr	r2, [pc, #424]	@ (80036b4 <HAL_I2C_Init+0x274>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <HAL_I2C_Init+0xd4>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	e009      	b.n	8003528 <HAL_I2C_Init+0xe8>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	4a69      	ldr	r2, [pc, #420]	@ (80036c4 <HAL_I2C_Init+0x284>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	3301      	adds	r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800353a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	495c      	ldr	r1, [pc, #368]	@ (80036b4 <HAL_I2C_Init+0x274>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d819      	bhi.n	800357c <HAL_I2C_Init+0x13c>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e59      	subs	r1, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fbb1 f3f3 	udiv	r3, r1, r3
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800355c:	400b      	ands	r3, r1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_I2C_Init+0x138>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e59      	subs	r1, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	e051      	b.n	800361c <HAL_I2C_Init+0x1dc>
 8003578:	2304      	movs	r3, #4
 800357a:	e04f      	b.n	800361c <HAL_I2C_Init+0x1dc>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <HAL_I2C_Init+0x168>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	440b      	add	r3, r1
 8003592:	fbb0 f3f3 	udiv	r3, r0, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e012      	b.n	80035ce <HAL_I2C_Init+0x18e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x196>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e022      	b.n	800361c <HAL_I2C_Init+0x1dc>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <HAL_I2C_Init+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1e58      	subs	r0, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	440b      	add	r3, r1
 80035ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035fa:	e00f      	b.n	800361c <HAL_I2C_Init+0x1dc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6809      	ldr	r1, [r1, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800364a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6911      	ldr	r1, [r2, #16]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	000186a0 	.word	0x000186a0
 80036b8:	001e847f 	.word	0x001e847f
 80036bc:	003d08ff 	.word	0x003d08ff
 80036c0:	431bde83 	.word	0x431bde83
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e267      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d075      	beq.n	80037d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036e6:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b85      	ldr	r3, [pc, #532]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b82      	ldr	r3, [pc, #520]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b7e      	ldr	r3, [pc, #504]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x108>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e242      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x74>
 800372e:	4b76      	ldr	r3, [pc, #472]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a75      	ldr	r2, [pc, #468]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xb0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x98>
 8003746:	4b70      	ldr	r3, [pc, #448]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6f      	ldr	r2, [pc, #444]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b6d      	ldr	r3, [pc, #436]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6c      	ldr	r2, [pc, #432]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xb0>
 8003760:	4b69      	ldr	r3, [pc, #420]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a68      	ldr	r2, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fbf4 	bl	8001f6c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fbf0 	bl	8001f6c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e207      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b5b      	ldr	r3, [pc, #364]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xc0>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fbe0 	bl	8001f6c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fbdc 	bl	8001f6c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1f3      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b51      	ldr	r3, [pc, #324]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0xe8>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d063      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037de:	4b4a      	ldr	r3, [pc, #296]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ea:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d11c      	bne.n	8003830 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b44      	ldr	r3, [pc, #272]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	4b41      	ldr	r3, [pc, #260]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_RCC_OscConfig+0x152>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1c7      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b3b      	ldr	r3, [pc, #236]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4937      	ldr	r1, [pc, #220]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	e03a      	b.n	80038a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003838:	4b34      	ldr	r3, [pc, #208]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fb95 	bl	8001f6c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003846:	f7fe fb91 	bl	8001f6c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e1a8      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003864:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4925      	ldr	r1, [pc, #148]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	e015      	b.n	80038a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387a:	4b24      	ldr	r3, [pc, #144]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fb74 	bl	8001f6c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003888:	f7fe fb70 	bl	8001f6c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e187      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d036      	beq.n	8003920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <HAL_RCC_OscConfig+0x248>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fe fb54 	bl	8001f6c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe fb50 	bl	8001f6c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e167      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x240>)
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x200>
 80038e6:	e01b      	b.n	8003920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e8:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <HAL_RCC_OscConfig+0x248>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fe fb3d 	bl	8001f6c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	e00e      	b.n	8003914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fe fb39 	bl	8001f6c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d907      	bls.n	8003914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e150      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	42470000 	.word	0x42470000
 8003910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b88      	ldr	r3, [pc, #544]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ea      	bne.n	80038f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8097 	beq.w	8003a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b81      	ldr	r3, [pc, #516]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	4b7d      	ldr	r3, [pc, #500]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	4a7c      	ldr	r2, [pc, #496]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	@ 0x40
 800394e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b77      	ldr	r3, [pc, #476]	@ (8003b3c <HAL_RCC_OscConfig+0x474>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d118      	bne.n	800399c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b74      	ldr	r3, [pc, #464]	@ (8003b3c <HAL_RCC_OscConfig+0x474>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a73      	ldr	r2, [pc, #460]	@ (8003b3c <HAL_RCC_OscConfig+0x474>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fe faf9 	bl	8001f6c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fe faf5 	bl	8001f6c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e10c      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <HAL_RCC_OscConfig+0x474>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x2ea>
 80039a4:	4b64      	ldr	r3, [pc, #400]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a8:	4a63      	ldr	r2, [pc, #396]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b0:	e01c      	b.n	80039ec <HAL_RCC_OscConfig+0x324>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x30c>
 80039ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4a5e      	ldr	r2, [pc, #376]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0x324>
 80039d4:	4b58      	ldr	r3, [pc, #352]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	4a57      	ldr	r2, [pc, #348]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e0:	4b55      	ldr	r3, [pc, #340]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a54      	ldr	r2, [pc, #336]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f023 0304 	bic.w	r3, r3, #4
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe faba 	bl	8001f6c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe fab6 	bl	8001f6c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0cb      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	4b49      	ldr	r3, [pc, #292]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCC_OscConfig+0x334>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe faa4 	bl	8001f6c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fe faa0 	bl	8001f6c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0b5      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1ee      	bne.n	8003a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b39      	ldr	r3, [pc, #228]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	4a38      	ldr	r2, [pc, #224]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80a1 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a66:	4b34      	ldr	r3, [pc, #208]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d05c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d141      	bne.n	8003afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_RCC_OscConfig+0x478>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe fa74 	bl	8001f6c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe fa70 	bl	8001f6c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e087      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	4b27      	ldr	r3, [pc, #156]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	491b      	ldr	r1, [pc, #108]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <HAL_RCC_OscConfig+0x478>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fa49 	bl	8001f6c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fa45 	bl	8001f6c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e05c      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x416>
 8003afc:	e054      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <HAL_RCC_OscConfig+0x478>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fa32 	bl	8001f6c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fa2e 	bl	8001f6c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e045      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_OscConfig+0x470>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x444>
 8003b2a:	e03d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e038      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x4ec>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d028      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d121      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d11a      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800

08003bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0cc      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b68      	ldr	r3, [pc, #416]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d90c      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b65      	ldr	r3, [pc, #404]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b63      	ldr	r3, [pc, #396]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b8      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c0c:	4b59      	ldr	r3, [pc, #356]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a58      	ldr	r2, [pc, #352]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c24:	4b53      	ldr	r3, [pc, #332]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a52      	ldr	r2, [pc, #328]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c30:	4b50      	ldr	r3, [pc, #320]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	494d      	ldr	r1, [pc, #308]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d044      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b47      	ldr	r3, [pc, #284]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d119      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b3f      	ldr	r3, [pc, #252]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e06f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4b3b      	ldr	r3, [pc, #236]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e067      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b37      	ldr	r3, [pc, #220]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4934      	ldr	r1, [pc, #208]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe f960 	bl	8001f6c <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fe f95c 	bl	8001f6c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e04f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b25      	ldr	r3, [pc, #148]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d20c      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e032      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0c:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4916      	ldr	r1, [pc, #88]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2a:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	490e      	ldr	r1, [pc, #56]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d3e:	f000 f821 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	490a      	ldr	r1, [pc, #40]	@ (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d5a:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe f8c0 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023c00 	.word	0x40023c00
 8003d74:	40023800 	.word	0x40023800
 8003d78:	08007a58 	.word	0x08007a58
 8003d7c:	20000008 	.word	0x20000008
 8003d80:	2000000c 	.word	0x2000000c

08003d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d88:	b094      	sub	sp, #80	@ 0x50
 8003d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9c:	4b79      	ldr	r3, [pc, #484]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	f200 80e1 	bhi.w	8003f70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x34>
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003db6:	e0db      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b73      	ldr	r3, [pc, #460]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dbc:	e0db      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dbe:	4b73      	ldr	r3, [pc, #460]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x208>)
 8003dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dc2:	e0d8      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dce:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	2200      	movs	r2, #0
 8003de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003de4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dee:	2300      	movs	r3, #0
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4621      	mov	r1, r4
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	6139      	str	r1, [r7, #16]
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e32:	4651      	mov	r1, sl
 8003e34:	018a      	lsls	r2, r1, #6
 8003e36:	4651      	mov	r1, sl
 8003e38:	ebb2 0801 	subs.w	r8, r2, r1
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e56:	4690      	mov	r8, r2
 8003e58:	4699      	mov	r9, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	eb18 0303 	adds.w	r3, r8, r3
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	462b      	mov	r3, r5
 8003e64:	eb49 0303 	adc.w	r3, r9, r3
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e76:	4629      	mov	r1, r5
 8003e78:	024b      	lsls	r3, r1, #9
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e80:	4621      	mov	r1, r4
 8003e82:	024a      	lsls	r2, r1, #9
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e94:	f7fc fa0c 	bl	80002b0 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea0:	e058      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea2:	4b38      	ldr	r3, [pc, #224]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	4611      	mov	r1, r2
 8003eae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	0159      	lsls	r1, r3, #5
 8003eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ece:	0150      	lsls	r0, r2, #5
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	00eb      	lsls	r3, r5, #3
 8003f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0a:	00e2      	lsls	r2, r4, #3
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	18e3      	adds	r3, r4, r3
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	464b      	mov	r3, r9
 8003f18:	eb45 0303 	adc.w	r3, r5, r3
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	028b      	lsls	r3, r1, #10
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f34:	4621      	mov	r1, r4
 8003f36:	028a      	lsls	r2, r1, #10
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	61fa      	str	r2, [r7, #28]
 8003f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f48:	f7fc f9b2 	bl	80002b0 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3750      	adds	r7, #80	@ 0x50
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	007a1200 	.word	0x007a1200

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000008 	.word	0x20000008

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08007a68 	.word	0x08007a68

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd4:	f7ff ffdc 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08007a68 	.word	0x08007a68

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e041      	b.n	800408e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fd64 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fcbe 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e03c      	b.n	800412a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004138 <HAL_TIM_Base_Start+0xa0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ca:	d013      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_TIM_Base_Start+0xa4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_TIM_Base_Start+0xa8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_TIM_Base_Start+0xac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a16      	ldr	r2, [pc, #88]	@ (8004148 <HAL_TIM_Base_Start+0xb0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d111      	bne.n	8004118 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d010      	beq.n	8004128 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e007      	b.n	8004128 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000

0800414c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <HAL_TIM_Base_Stop+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	f240 4344 	movw	r3, #1092	@ 0x444
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_TIM_Base_Stop+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e044      	b.n	800423e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1e      	ldr	r2, [pc, #120]	@ (800424c <HAL_TIM_Base_Start_IT+0xb0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041de:	d013      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <HAL_TIM_Base_Start_IT+0xb4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a19      	ldr	r2, [pc, #100]	@ (8004254 <HAL_TIM_Base_Start_IT+0xb8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <HAL_TIM_Base_Start_IT+0xbc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_TIM_Base_Start_IT+0xc0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d010      	beq.n	800423c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	e007      	b.n	800423c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000

08004260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e041      	b.n	80042f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f839 	bl	80042fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 fb8a 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_TIM_PWM_Start+0x24>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e022      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b04      	cmp	r3, #4
 800433c:	d109      	bne.n	8004352 <HAL_TIM_PWM_Start+0x3e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e015      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x58>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e008      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e068      	b.n	8004458 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0x82>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004394:	e013      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x92>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	e00b      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b4:	e003      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fda8 	bl	8004f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a23      	ldr	r2, [pc, #140]	@ (8004460 <HAL_TIM_PWM_Start+0x14c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004460 <HAL_TIM_PWM_Start+0x14c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_TIM_PWM_Start+0x10e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f8:	d013      	beq.n	8004422 <HAL_TIM_PWM_Start+0x10e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a19      	ldr	r2, [pc, #100]	@ (8004464 <HAL_TIM_PWM_Start+0x150>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_TIM_PWM_Start+0x10e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_TIM_PWM_Start+0x154>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_TIM_PWM_Start+0x10e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_TIM_PWM_Start+0x158>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIM_PWM_Start+0x10e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a14      	ldr	r2, [pc, #80]	@ (8004470 <HAL_TIM_PWM_Start+0x15c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d111      	bne.n	8004446 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d010      	beq.n	8004456 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	e007      	b.n	8004456 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40010000 	.word	0x40010000
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40000c00 	.word	0x40000c00
 8004470:	40014000 	.word	0x40014000

08004474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0202 	mvn.w	r2, #2
 80044a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa5b 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa4d 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa5e 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0204 	mvn.w	r2, #4
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa35 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa27 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa38 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0208 	mvn.w	r2, #8
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa0f 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa01 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa12 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2208      	movs	r2, #8
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9e9 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9db 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9ec 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0201 	mvn.w	r2, #1
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fd3c 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fd2a 	bl	8005058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00c      	beq.n	8004628 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9bd 	bl	80049a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0220 	mvn.w	r2, #32
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fcfc 	bl	8005044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ae      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	f200 809f 	bhi.w	80047c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004682:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080047c1 	.word	0x080047c1
 8004690:	080047c1 	.word	0x080047c1
 8004694:	080047c1 	.word	0x080047c1
 8004698:	080046fd 	.word	0x080046fd
 800469c:	080047c1 	.word	0x080047c1
 80046a0:	080047c1 	.word	0x080047c1
 80046a4:	080047c1 	.word	0x080047c1
 80046a8:	0800473f 	.word	0x0800473f
 80046ac:	080047c1 	.word	0x080047c1
 80046b0:	080047c1 	.word	0x080047c1
 80046b4:	080047c1 	.word	0x080047c1
 80046b8:	0800477f 	.word	0x0800477f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa04 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e064      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa4a 	bl	8004b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e043      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa95 	bl	8004c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e023      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fadf 	bl	8004d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0b4      	b.n	800495e <HAL_TIM_ConfigClockSource+0x186>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482c:	d03e      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0xd4>
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004832:	f200 8087 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483a:	f000 8086 	beq.w	800494a <HAL_TIM_ConfigClockSource+0x172>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004842:	d87f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b70      	cmp	r3, #112	@ 0x70
 8004846:	d01a      	beq.n	800487e <HAL_TIM_ConfigClockSource+0xa6>
 8004848:	2b70      	cmp	r3, #112	@ 0x70
 800484a:	d87b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b60      	cmp	r3, #96	@ 0x60
 800484e:	d050      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004850:	2b60      	cmp	r3, #96	@ 0x60
 8004852:	d877      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b50      	cmp	r3, #80	@ 0x50
 8004856:	d03c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004858:	2b50      	cmp	r3, #80	@ 0x50
 800485a:	d873      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d058      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x13a>
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d86f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d064      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b30      	cmp	r3, #48	@ 0x30
 800486a:	d86b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d060      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d867      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d05a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	e062      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	f000 fb25 	bl	8004edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	609a      	str	r2, [r3, #8]
      break;
 80048aa:	e04f      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	f000 fb0e 	bl	8004edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
      break;
 80048d0:	e03c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fa82 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2150      	movs	r1, #80	@ 0x50
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fadb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e02c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 faa1 	bl	8004e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2160      	movs	r1, #96	@ 0x60
 800490a:	4618      	mov	r0, r3
 800490c:	f000 facb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004910:	e01c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fa62 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2140      	movs	r1, #64	@ 0x40
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fabb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004930:	e00c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f000 fab2 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004942:	e003      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e000      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800494a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab4 <TIM_Base_SetConfig+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a37      	ldr	r2, [pc, #220]	@ (8004ab8 <TIM_Base_SetConfig+0x100>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a36      	ldr	r2, [pc, #216]	@ (8004abc <TIM_Base_SetConfig+0x104>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a35      	ldr	r2, [pc, #212]	@ (8004ac0 <TIM_Base_SetConfig+0x108>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <TIM_Base_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01b      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d017      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a28      	ldr	r2, [pc, #160]	@ (8004ab8 <TIM_Base_SetConfig+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a27      	ldr	r2, [pc, #156]	@ (8004abc <TIM_Base_SetConfig+0x104>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	@ (8004ac0 <TIM_Base_SetConfig+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ac4 <TIM_Base_SetConfig+0x10c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a24      	ldr	r2, [pc, #144]	@ (8004ac8 <TIM_Base_SetConfig+0x110>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	@ (8004acc <TIM_Base_SetConfig+0x114>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <TIM_Base_SetConfig+0xfc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0302 	bic.w	r3, r3, #2
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <TIM_OC1_SetConfig+0xc8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0308 	bic.w	r3, r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a13      	ldr	r2, [pc, #76]	@ (8004b98 <TIM_OC1_SetConfig+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d111      	bne.n	8004b72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000

08004b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f023 0210 	bic.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f023 0320 	bic.w	r3, r3, #32
 8004be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c70 <TIM_OC2_SetConfig+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10d      	bne.n	8004c18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <TIM_OC2_SetConfig+0xd4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d113      	bne.n	8004c48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000

08004c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <TIM_OC3_SetConfig+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10d      	bne.n	8004cee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a14      	ldr	r2, [pc, #80]	@ (8004d44 <TIM_OC3_SetConfig+0xd0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d113      	bne.n	8004d1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40010000 	.word	0x40010000

08004d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	031b      	lsls	r3, r3, #12
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a10      	ldr	r2, [pc, #64]	@ (8004de4 <TIM_OC4_SetConfig+0x9c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d109      	bne.n	8004dbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 0210 	bic.w	r2, r3, #16
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f043 0307 	orr.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e050      	b.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000

08005044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e042      	b.n	8005104 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fe2a 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	@ 0x24
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb83 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	d175      	bne.n	8005218 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Transmit+0x2c>
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e06e      	b.n	800521a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	@ 0x21
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800514a:	f7fc ff0f 	bl	8001f6c <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005164:	d108      	bne.n	8005178 <HAL_UART_Transmit+0x6c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e003      	b.n	8005180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005180:	e02e      	b.n	80051e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f995 	bl	80054bc <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e03a      	b.n	800521a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3302      	adds	r3, #2
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e007      	b.n	80051d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cb      	bne.n	8005182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	@ 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f961 	bl	80054bc <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	4613      	mov	r3, r2
 800522e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	d112      	bne.n	8005262 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_UART_Receive_DMA+0x26>
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e00b      	b.n	8005264 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	461a      	mov	r2, r3
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f989 	bl	8005570 <UART_Start_Receive_DMA>
 800525e:	4603      	mov	r3, r0
 8005260:	e000      	b.n	8005264 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b09c      	sub	sp, #112	@ 0x70
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d172      	bne.n	80053c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052de:	2200      	movs	r2, #0
 80052e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005302:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005304:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	667b      	str	r3, [r7, #100]	@ 0x64
 800532e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005336:	647a      	str	r2, [r7, #68]	@ 0x44
 8005338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800533c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	623b      	str	r3, [r7, #32]
   return(result);
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005360:	663b      	str	r3, [r7, #96]	@ 0x60
 8005362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800536a:	633a      	str	r2, [r7, #48]	@ 0x30
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800537e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	2b01      	cmp	r3, #1
 800538c:	d119      	bne.n	80053c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	60fb      	str	r3, [r7, #12]
   return(result);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0310 	bic.w	r3, r3, #16
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053ae:	61fa      	str	r2, [r7, #28]
 80053b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	69b9      	ldr	r1, [r7, #24]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	617b      	str	r3, [r7, #20]
   return(result);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c4:	2200      	movs	r2, #0
 80053c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053d4:	4619      	mov	r1, r3
 80053d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053d8:	f7ff ff66 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053dc:	e002      	b.n	80053e4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053e0:	f7ff ff44 	bl	800526c <HAL_UART_RxCpltCallback>
}
 80053e4:	bf00      	nop
 80053e6:	3770      	adds	r7, #112	@ 0x70
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005404:	2b01      	cmp	r3, #1
 8005406:	d108      	bne.n	800541a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff48 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005418:	e002      	b.n	8005420 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff30 	bl	8005280 <HAL_UART_RxHalfCpltCallback>
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b80      	cmp	r3, #128	@ 0x80
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b21      	cmp	r3, #33	@ 0x21
 800545a:	d108      	bne.n	800546e <UART_DMAError+0x46>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005468:	68b8      	ldr	r0, [r7, #8]
 800546a:	f000 f91b 	bl	80056a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b22      	cmp	r3, #34	@ 0x22
 800548e:	d108      	bne.n	80054a2 <UART_DMAError+0x7a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800549c:	68b8      	ldr	r0, [r7, #8]
 800549e:	f000 f929 	bl	80056f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	f043 0210 	orr.w	r2, r3, #16
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ae:	68b8      	ldr	r0, [r7, #8]
 80054b0:	f7ff fef0 	bl	8005294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054cc:	e03b      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d037      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fc fd49 	bl	8001f6c <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <UART_WaitOnFlagUntilTimeout+0x30>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e03a      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d023      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b80      	cmp	r3, #128	@ 0x80
 8005502:	d020      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d01d      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d116      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f8e0 	bl	80056f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2208      	movs	r2, #8
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e00f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0b4      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b098      	sub	sp, #96	@ 0x60
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2222      	movs	r2, #34	@ 0x22
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	4a3e      	ldr	r2, [pc, #248]	@ (8005698 <UART_Start_Receive_DMA+0x128>)
 800559e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a4:	4a3d      	ldr	r2, [pc, #244]	@ (800569c <UART_Start_Receive_DMA+0x12c>)
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ac:	4a3c      	ldr	r2, [pc, #240]	@ (80056a0 <UART_Start_Receive_DMA+0x130>)
 80055ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	2200      	movs	r2, #0
 80055b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	f7fd fabe 	bl	8002b50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005608:	65bb      	str	r3, [r7, #88]	@ 0x58
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005612:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005614:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005618:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	657b      	str	r3, [r7, #84]	@ 0x54
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005646:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800564c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	617b      	str	r3, [r7, #20]
   return(result);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005670:	653b      	str	r3, [r7, #80]	@ 0x50
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800567a:	627a      	str	r2, [r7, #36]	@ 0x24
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6a39      	ldr	r1, [r7, #32]
 8005680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61fb      	str	r3, [r7, #28]
   return(result);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3760      	adds	r7, #96	@ 0x60
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	080052c1 	.word	0x080052c1
 800569c:	080053ed 	.word	0x080053ed
 80056a0:	08005429 	.word	0x08005429

080056a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	@ 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	61ba      	str	r2, [r7, #24]
 80056ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	613b      	str	r3, [r7, #16]
   return(result);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80056e8:	bf00      	nop
 80056ea:	3724      	adds	r7, #36	@ 0x24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b095      	sub	sp, #84	@ 0x54
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800571c:	643a      	str	r2, [r7, #64]	@ 0x40
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	d119      	bne.n	80057a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	60bb      	str	r3, [r7, #8]
   return(result);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	647b      	str	r3, [r7, #68]	@ 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330c      	adds	r3, #12
 800578a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578c:	61ba      	str	r2, [r7, #24]
 800578e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	613b      	str	r3, [r7, #16]
   return(result);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057ae:	bf00      	nop
 80057b0:	3754      	adds	r7, #84	@ 0x54
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b0c0      	sub	sp, #256	@ 0x100
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	ea40 0301 	orr.w	r3, r0, r1
 80057e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005814:	f021 010c 	bic.w	r1, r1, #12
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005822:	430b      	orrs	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	ea40 0301 	orr.w	r3, r0, r1
 8005842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a88 <UART_SetConfig+0x2cc>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d005      	beq.n	800585c <UART_SetConfig+0xa0>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <UART_SetConfig+0x2d0>)
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fe fbb8 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8005860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005864:	e003      	b.n	800586e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fe fb9f 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 800586a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005878:	f040 810c 	bne.w	8005a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800588a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005896:	415b      	adcs	r3, r3
 8005898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800589a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800589e:	4621      	mov	r1, r4
 80058a0:	eb12 0801 	adds.w	r8, r2, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb43 0901 	adc.w	r9, r3, r1
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	eb18 0303 	adds.w	r3, r8, r3
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ea:	460b      	mov	r3, r1
 80058ec:	18db      	adds	r3, r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f0:	4613      	mov	r3, r2
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005900:	f7fa fcd6 	bl	80002b0 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011c      	lsls	r4, r3, #4
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800591c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800592c:	415b      	adcs	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005934:	4641      	mov	r1, r8
 8005936:	eb12 0a01 	adds.w	sl, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0b01 	adc.w	fp, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4643      	mov	r3, r8
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005962:	464b      	mov	r3, r9
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005996:	f7fa fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	@ 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a52:	f7fa fc2d 	bl	80002b0 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	@ 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	@ 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e106      	b.n	8005c94 <UART_SetConfig+0x4d8>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0501 	adc.w	r5, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005adc:	464b      	mov	r3, r9
 8005ade:	eb45 0303 	adc.w	r3, r5, r3
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b02:	4629      	mov	r1, r5
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b14:	f7fa fbcc 	bl	80002b0 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	61b9      	str	r1, [r7, #24]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6139      	str	r1, [r7, #16]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bb2:	f7fa fb7d 	bl	80002b0 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2264      	movs	r2, #100	@ 0x64
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	1acb      	subs	r3, r1, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	@ 0x32
 8005bd0:	4a33      	ldr	r2, [pc, #204]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bdc:	441c      	add	r4, r3
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6039      	str	r1, [r7, #0]
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2e:	464b      	mov	r3, r9
 8005c30:	460a      	mov	r2, r1
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c62:	f7fa fb25 	bl	80002b0 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	@ 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	@ 0x32
 8005c7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 020f 	and.w	r2, r3, #15
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4422      	add	r2, r4
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca0:	51eb851f 	.word	0x51eb851f

08005ca4 <std>:
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	4604      	mov	r4, r0
 8005caa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb2:	6083      	str	r3, [r0, #8]
 8005cb4:	8181      	strh	r1, [r0, #12]
 8005cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cb8:	81c2      	strh	r2, [r0, #14]
 8005cba:	6183      	str	r3, [r0, #24]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	305c      	adds	r0, #92	@ 0x5c
 8005cc2:	f000 fa49 	bl	8006158 <memset>
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <std+0x58>)
 8005cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cca:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <std+0x5c>)
 8005ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <std+0x60>)
 8005cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <std+0x64>)
 8005cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <std+0x68>)
 8005cd8:	6224      	str	r4, [r4, #32]
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	d006      	beq.n	8005cec <std+0x48>
 8005cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ce2:	4294      	cmp	r4, r2
 8005ce4:	d002      	beq.n	8005cec <std+0x48>
 8005ce6:	33d0      	adds	r3, #208	@ 0xd0
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d105      	bne.n	8005cf8 <std+0x54>
 8005cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf4:	f000 baa8 	b.w	8006248 <__retarget_lock_init_recursive>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08005fa5 	.word	0x08005fa5
 8005d00:	08005fcb 	.word	0x08005fcb
 8005d04:	08006003 	.word	0x08006003
 8005d08:	08006027 	.word	0x08006027
 8005d0c:	200003d8 	.word	0x200003d8

08005d10 <stdio_exit_handler>:
 8005d10:	4a02      	ldr	r2, [pc, #8]	@ (8005d1c <stdio_exit_handler+0xc>)
 8005d12:	4903      	ldr	r1, [pc, #12]	@ (8005d20 <stdio_exit_handler+0x10>)
 8005d14:	4803      	ldr	r0, [pc, #12]	@ (8005d24 <stdio_exit_handler+0x14>)
 8005d16:	f000 b869 	b.w	8005dec <_fwalk_sglue>
 8005d1a:	bf00      	nop
 8005d1c:	20000014 	.word	0x20000014
 8005d20:	080073d1 	.word	0x080073d1
 8005d24:	20000024 	.word	0x20000024

08005d28 <cleanup_stdio>:
 8005d28:	6841      	ldr	r1, [r0, #4]
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <cleanup_stdio+0x34>)
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	4604      	mov	r4, r0
 8005d32:	d001      	beq.n	8005d38 <cleanup_stdio+0x10>
 8005d34:	f001 fb4c 	bl	80073d0 <_fflush_r>
 8005d38:	68a1      	ldr	r1, [r4, #8]
 8005d3a:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <cleanup_stdio+0x38>)
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	d002      	beq.n	8005d46 <cleanup_stdio+0x1e>
 8005d40:	4620      	mov	r0, r4
 8005d42:	f001 fb45 	bl	80073d0 <_fflush_r>
 8005d46:	68e1      	ldr	r1, [r4, #12]
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <cleanup_stdio+0x3c>)
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	d004      	beq.n	8005d58 <cleanup_stdio+0x30>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d54:	f001 bb3c 	b.w	80073d0 <_fflush_r>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200003d8 	.word	0x200003d8
 8005d60:	20000440 	.word	0x20000440
 8005d64:	200004a8 	.word	0x200004a8

08005d68 <global_stdio_init.part.0>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <global_stdio_init.part.0+0x30>)
 8005d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d9c <global_stdio_init.part.0+0x34>)
 8005d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005da0 <global_stdio_init.part.0+0x38>)
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	4620      	mov	r0, r4
 8005d74:	2200      	movs	r2, #0
 8005d76:	2104      	movs	r1, #4
 8005d78:	f7ff ff94 	bl	8005ca4 <std>
 8005d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d80:	2201      	movs	r2, #1
 8005d82:	2109      	movs	r1, #9
 8005d84:	f7ff ff8e 	bl	8005ca4 <std>
 8005d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d92:	2112      	movs	r1, #18
 8005d94:	f7ff bf86 	b.w	8005ca4 <std>
 8005d98:	20000510 	.word	0x20000510
 8005d9c:	200003d8 	.word	0x200003d8
 8005da0:	08005d11 	.word	0x08005d11

08005da4 <__sfp_lock_acquire>:
 8005da4:	4801      	ldr	r0, [pc, #4]	@ (8005dac <__sfp_lock_acquire+0x8>)
 8005da6:	f000 ba50 	b.w	800624a <__retarget_lock_acquire_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000519 	.word	0x20000519

08005db0 <__sfp_lock_release>:
 8005db0:	4801      	ldr	r0, [pc, #4]	@ (8005db8 <__sfp_lock_release+0x8>)
 8005db2:	f000 ba4b 	b.w	800624c <__retarget_lock_release_recursive>
 8005db6:	bf00      	nop
 8005db8:	20000519 	.word	0x20000519

08005dbc <__sinit>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f7ff fff0 	bl	8005da4 <__sfp_lock_acquire>
 8005dc4:	6a23      	ldr	r3, [r4, #32]
 8005dc6:	b11b      	cbz	r3, 8005dd0 <__sinit+0x14>
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dcc:	f7ff bff0 	b.w	8005db0 <__sfp_lock_release>
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <__sinit+0x28>)
 8005dd2:	6223      	str	r3, [r4, #32]
 8005dd4:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <__sinit+0x2c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f5      	bne.n	8005dc8 <__sinit+0xc>
 8005ddc:	f7ff ffc4 	bl	8005d68 <global_stdio_init.part.0>
 8005de0:	e7f2      	b.n	8005dc8 <__sinit+0xc>
 8005de2:	bf00      	nop
 8005de4:	08005d29 	.word	0x08005d29
 8005de8:	20000510 	.word	0x20000510

08005dec <_fwalk_sglue>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	4607      	mov	r7, r0
 8005df2:	4688      	mov	r8, r1
 8005df4:	4614      	mov	r4, r2
 8005df6:	2600      	movs	r6, #0
 8005df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8005e00:	d505      	bpl.n	8005e0e <_fwalk_sglue+0x22>
 8005e02:	6824      	ldr	r4, [r4, #0]
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d1f7      	bne.n	8005df8 <_fwalk_sglue+0xc>
 8005e08:	4630      	mov	r0, r6
 8005e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d907      	bls.n	8005e24 <_fwalk_sglue+0x38>
 8005e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	d003      	beq.n	8005e24 <_fwalk_sglue+0x38>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4638      	mov	r0, r7
 8005e20:	47c0      	blx	r8
 8005e22:	4306      	orrs	r6, r0
 8005e24:	3568      	adds	r5, #104	@ 0x68
 8005e26:	e7e9      	b.n	8005dfc <_fwalk_sglue+0x10>

08005e28 <iprintf>:
 8005e28:	b40f      	push	{r0, r1, r2, r3}
 8005e2a:	b507      	push	{r0, r1, r2, lr}
 8005e2c:	4906      	ldr	r1, [pc, #24]	@ (8005e48 <iprintf+0x20>)
 8005e2e:	ab04      	add	r3, sp, #16
 8005e30:	6808      	ldr	r0, [r1, #0]
 8005e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e36:	6881      	ldr	r1, [r0, #8]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	f000 fe53 	bl	8006ae4 <_vfiprintf_r>
 8005e3e:	b003      	add	sp, #12
 8005e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr
 8005e48:	20000020 	.word	0x20000020

08005e4c <_puts_r>:
 8005e4c:	6a03      	ldr	r3, [r0, #32]
 8005e4e:	b570      	push	{r4, r5, r6, lr}
 8005e50:	6884      	ldr	r4, [r0, #8]
 8005e52:	4605      	mov	r5, r0
 8005e54:	460e      	mov	r6, r1
 8005e56:	b90b      	cbnz	r3, 8005e5c <_puts_r+0x10>
 8005e58:	f7ff ffb0 	bl	8005dbc <__sinit>
 8005e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e5e:	07db      	lsls	r3, r3, #31
 8005e60:	d405      	bmi.n	8005e6e <_puts_r+0x22>
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	0598      	lsls	r0, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_puts_r+0x22>
 8005e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e6a:	f000 f9ee 	bl	800624a <__retarget_lock_acquire_recursive>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	0719      	lsls	r1, r3, #28
 8005e72:	d502      	bpl.n	8005e7a <_puts_r+0x2e>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d135      	bne.n	8005ee6 <_puts_r+0x9a>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f915 	bl	80060ac <__swsetup_r>
 8005e82:	b380      	cbz	r0, 8005ee6 <_puts_r+0x9a>
 8005e84:	f04f 35ff 	mov.w	r5, #4294967295
 8005e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e8a:	07da      	lsls	r2, r3, #31
 8005e8c:	d405      	bmi.n	8005e9a <_puts_r+0x4e>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	059b      	lsls	r3, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_puts_r+0x4e>
 8005e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e96:	f000 f9d9 	bl	800624c <__retarget_lock_release_recursive>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da04      	bge.n	8005eac <_puts_r+0x60>
 8005ea2:	69a2      	ldr	r2, [r4, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	dc17      	bgt.n	8005ed8 <_puts_r+0x8c>
 8005ea8:	290a      	cmp	r1, #10
 8005eaa:	d015      	beq.n	8005ed8 <_puts_r+0x8c>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	7019      	strb	r1, [r3, #0]
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d1ed      	bne.n	8005e9e <_puts_r+0x52>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da11      	bge.n	8005eea <_puts_r+0x9e>
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	210a      	movs	r1, #10
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f8af 	bl	800602e <__swbuf_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0d7      	beq.n	8005e84 <_puts_r+0x38>
 8005ed4:	250a      	movs	r5, #10
 8005ed6:	e7d7      	b.n	8005e88 <_puts_r+0x3c>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f8a7 	bl	800602e <__swbuf_r>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d1e7      	bne.n	8005eb4 <_puts_r+0x68>
 8005ee4:	e7ce      	b.n	8005e84 <_puts_r+0x38>
 8005ee6:	3e01      	subs	r6, #1
 8005ee8:	e7e4      	b.n	8005eb4 <_puts_r+0x68>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e7ee      	b.n	8005ed4 <_puts_r+0x88>
	...

08005ef8 <puts>:
 8005ef8:	4b02      	ldr	r3, [pc, #8]	@ (8005f04 <puts+0xc>)
 8005efa:	4601      	mov	r1, r0
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	f7ff bfa5 	b.w	8005e4c <_puts_r>
 8005f02:	bf00      	nop
 8005f04:	20000020 	.word	0x20000020

08005f08 <siprintf>:
 8005f08:	b40e      	push	{r1, r2, r3}
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	b09d      	sub	sp, #116	@ 0x74
 8005f0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005f10:	9002      	str	r0, [sp, #8]
 8005f12:	9006      	str	r0, [sp, #24]
 8005f14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f18:	480a      	ldr	r0, [pc, #40]	@ (8005f44 <siprintf+0x3c>)
 8005f1a:	9107      	str	r1, [sp, #28]
 8005f1c:	9104      	str	r1, [sp, #16]
 8005f1e:	490a      	ldr	r1, [pc, #40]	@ (8005f48 <siprintf+0x40>)
 8005f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f24:	9105      	str	r1, [sp, #20]
 8005f26:	2400      	movs	r4, #0
 8005f28:	a902      	add	r1, sp, #8
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f30:	f000 fae2 	bl	80064f8 <_svfiprintf_r>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	701c      	strb	r4, [r3, #0]
 8005f38:	b01d      	add	sp, #116	@ 0x74
 8005f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3e:	b003      	add	sp, #12
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000020 	.word	0x20000020
 8005f48:	ffff0208 	.word	0xffff0208

08005f4c <siscanf>:
 8005f4c:	b40e      	push	{r1, r2, r3}
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	b09d      	sub	sp, #116	@ 0x74
 8005f52:	ac21      	add	r4, sp, #132	@ 0x84
 8005f54:	2500      	movs	r5, #0
 8005f56:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005f5a:	f854 6b04 	ldr.w	r6, [r4], #4
 8005f5e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f62:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005f64:	9002      	str	r0, [sp, #8]
 8005f66:	9006      	str	r0, [sp, #24]
 8005f68:	f7fa f944 	bl	80001f4 <strlen>
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <siscanf+0x50>)
 8005f6e:	9003      	str	r0, [sp, #12]
 8005f70:	9007      	str	r0, [sp, #28]
 8005f72:	480b      	ldr	r0, [pc, #44]	@ (8005fa0 <siscanf+0x54>)
 8005f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4623      	mov	r3, r4
 8005f82:	a902      	add	r1, sp, #8
 8005f84:	6800      	ldr	r0, [r0, #0]
 8005f86:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005f88:	9514      	str	r5, [sp, #80]	@ 0x50
 8005f8a:	9401      	str	r4, [sp, #4]
 8005f8c:	f000 fc0a 	bl	80067a4 <__ssvfiscanf_r>
 8005f90:	b01d      	add	sp, #116	@ 0x74
 8005f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f96:	b003      	add	sp, #12
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	08005fc7 	.word	0x08005fc7
 8005fa0:	20000020 	.word	0x20000020

08005fa4 <__sread>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	f000 f8fe 	bl	80061ac <_read_r>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	bfab      	itete	ge
 8005fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fb8:	181b      	addge	r3, r3, r0
 8005fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fbe:	bfac      	ite	ge
 8005fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fc2:	81a3      	strhlt	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__seofread>:
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	4770      	bx	lr

08005fca <__swrite>:
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	461f      	mov	r7, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	05db      	lsls	r3, r3, #23
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4616      	mov	r6, r2
 8005fda:	d505      	bpl.n	8005fe8 <__swrite+0x1e>
 8005fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f000 f8d0 	bl	8006188 <_lseek_r>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 b8e7 	b.w	80061d0 <_write_r>

08006002 <__sseek>:
 8006002:	b510      	push	{r4, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 f8bd 	bl	8006188 <_lseek_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	bf15      	itete	ne
 8006014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800601a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800601e:	81a3      	strheq	r3, [r4, #12]
 8006020:	bf18      	it	ne
 8006022:	81a3      	strhne	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__sclose>:
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 b89d 	b.w	8006168 <_close_r>

0800602e <__swbuf_r>:
 800602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006030:	460e      	mov	r6, r1
 8006032:	4614      	mov	r4, r2
 8006034:	4605      	mov	r5, r0
 8006036:	b118      	cbz	r0, 8006040 <__swbuf_r+0x12>
 8006038:	6a03      	ldr	r3, [r0, #32]
 800603a:	b90b      	cbnz	r3, 8006040 <__swbuf_r+0x12>
 800603c:	f7ff febe 	bl	8005dbc <__sinit>
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	071a      	lsls	r2, r3, #28
 8006048:	d501      	bpl.n	800604e <__swbuf_r+0x20>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	b943      	cbnz	r3, 8006060 <__swbuf_r+0x32>
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f82b 	bl	80060ac <__swsetup_r>
 8006056:	b118      	cbz	r0, 8006060 <__swbuf_r+0x32>
 8006058:	f04f 37ff 	mov.w	r7, #4294967295
 800605c:	4638      	mov	r0, r7
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	6922      	ldr	r2, [r4, #16]
 8006064:	1a98      	subs	r0, r3, r2
 8006066:	6963      	ldr	r3, [r4, #20]
 8006068:	b2f6      	uxtb	r6, r6
 800606a:	4283      	cmp	r3, r0
 800606c:	4637      	mov	r7, r6
 800606e:	dc05      	bgt.n	800607c <__swbuf_r+0x4e>
 8006070:	4621      	mov	r1, r4
 8006072:	4628      	mov	r0, r5
 8006074:	f001 f9ac 	bl	80073d0 <_fflush_r>
 8006078:	2800      	cmp	r0, #0
 800607a:	d1ed      	bne.n	8006058 <__swbuf_r+0x2a>
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	3b01      	subs	r3, #1
 8006080:	60a3      	str	r3, [r4, #8]
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	6022      	str	r2, [r4, #0]
 8006088:	701e      	strb	r6, [r3, #0]
 800608a:	6962      	ldr	r2, [r4, #20]
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	429a      	cmp	r2, r3
 8006090:	d004      	beq.n	800609c <__swbuf_r+0x6e>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	07db      	lsls	r3, r3, #31
 8006096:	d5e1      	bpl.n	800605c <__swbuf_r+0x2e>
 8006098:	2e0a      	cmp	r6, #10
 800609a:	d1df      	bne.n	800605c <__swbuf_r+0x2e>
 800609c:	4621      	mov	r1, r4
 800609e:	4628      	mov	r0, r5
 80060a0:	f001 f996 	bl	80073d0 <_fflush_r>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0d9      	beq.n	800605c <__swbuf_r+0x2e>
 80060a8:	e7d6      	b.n	8006058 <__swbuf_r+0x2a>
	...

080060ac <__swsetup_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4b29      	ldr	r3, [pc, #164]	@ (8006154 <__swsetup_r+0xa8>)
 80060b0:	4605      	mov	r5, r0
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	460c      	mov	r4, r1
 80060b6:	b118      	cbz	r0, 80060c0 <__swsetup_r+0x14>
 80060b8:	6a03      	ldr	r3, [r0, #32]
 80060ba:	b90b      	cbnz	r3, 80060c0 <__swsetup_r+0x14>
 80060bc:	f7ff fe7e 	bl	8005dbc <__sinit>
 80060c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c4:	0719      	lsls	r1, r3, #28
 80060c6:	d422      	bmi.n	800610e <__swsetup_r+0x62>
 80060c8:	06da      	lsls	r2, r3, #27
 80060ca:	d407      	bmi.n	80060dc <__swsetup_r+0x30>
 80060cc:	2209      	movs	r2, #9
 80060ce:	602a      	str	r2, [r5, #0]
 80060d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295
 80060da:	e033      	b.n	8006144 <__swsetup_r+0x98>
 80060dc:	0758      	lsls	r0, r3, #29
 80060de:	d512      	bpl.n	8006106 <__swsetup_r+0x5a>
 80060e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060e2:	b141      	cbz	r1, 80060f6 <__swsetup_r+0x4a>
 80060e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060e8:	4299      	cmp	r1, r3
 80060ea:	d002      	beq.n	80060f2 <__swsetup_r+0x46>
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 f8af 	bl	8006250 <_free_r>
 80060f2:	2300      	movs	r3, #0
 80060f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	2300      	movs	r3, #0
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f043 0308 	orr.w	r3, r3, #8
 800610c:	81a3      	strh	r3, [r4, #12]
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	b94b      	cbnz	r3, 8006126 <__swsetup_r+0x7a>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d003      	beq.n	8006126 <__swsetup_r+0x7a>
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f001 f9a3 	bl	800746c <__smakebuf_r>
 8006126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800612a:	f013 0201 	ands.w	r2, r3, #1
 800612e:	d00a      	beq.n	8006146 <__swsetup_r+0x9a>
 8006130:	2200      	movs	r2, #0
 8006132:	60a2      	str	r2, [r4, #8]
 8006134:	6962      	ldr	r2, [r4, #20]
 8006136:	4252      	negs	r2, r2
 8006138:	61a2      	str	r2, [r4, #24]
 800613a:	6922      	ldr	r2, [r4, #16]
 800613c:	b942      	cbnz	r2, 8006150 <__swsetup_r+0xa4>
 800613e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006142:	d1c5      	bne.n	80060d0 <__swsetup_r+0x24>
 8006144:	bd38      	pop	{r3, r4, r5, pc}
 8006146:	0799      	lsls	r1, r3, #30
 8006148:	bf58      	it	pl
 800614a:	6962      	ldrpl	r2, [r4, #20]
 800614c:	60a2      	str	r2, [r4, #8]
 800614e:	e7f4      	b.n	800613a <__swsetup_r+0x8e>
 8006150:	2000      	movs	r0, #0
 8006152:	e7f7      	b.n	8006144 <__swsetup_r+0x98>
 8006154:	20000020 	.word	0x20000020

08006158 <memset>:
 8006158:	4402      	add	r2, r0
 800615a:	4603      	mov	r3, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	d100      	bne.n	8006162 <memset+0xa>
 8006160:	4770      	bx	lr
 8006162:	f803 1b01 	strb.w	r1, [r3], #1
 8006166:	e7f9      	b.n	800615c <memset+0x4>

08006168 <_close_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d06      	ldr	r5, [pc, #24]	@ (8006184 <_close_r+0x1c>)
 800616c:	2300      	movs	r3, #0
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fb fb19 	bl	80017aa <_close>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_close_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_close_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000514 	.word	0x20000514

08006188 <_lseek_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	@ (80061a8 <_lseek_r+0x20>)
 800618c:	4604      	mov	r4, r0
 800618e:	4608      	mov	r0, r1
 8006190:	4611      	mov	r1, r2
 8006192:	2200      	movs	r2, #0
 8006194:	602a      	str	r2, [r5, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	f7fb fb2e 	bl	80017f8 <_lseek>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_lseek_r+0x1e>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_lseek_r+0x1e>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	20000514 	.word	0x20000514

080061ac <_read_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	@ (80061cc <_read_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fb fabc 	bl	8001738 <_read>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_read_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_read_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20000514 	.word	0x20000514

080061d0 <_write_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	@ (80061f0 <_write_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fb fac7 	bl	8001772 <_write>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_write_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_write_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20000514 	.word	0x20000514

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	@ (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000020 	.word	0x20000020

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	@ (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	@ (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	@ (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	@ (8006244 <__libc_init_array+0x44>)
 8006214:	f001 fb56 	bl	80078c4 <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08007bd0 	.word	0x08007bd0
 800623c:	08007bd0 	.word	0x08007bd0
 8006240:	08007bd0 	.word	0x08007bd0
 8006244:	08007bd4 	.word	0x08007bd4

08006248 <__retarget_lock_init_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_acquire_recursive>:
 800624a:	4770      	bx	lr

0800624c <__retarget_lock_release_recursive>:
 800624c:	4770      	bx	lr
	...

08006250 <_free_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4605      	mov	r5, r0
 8006254:	2900      	cmp	r1, #0
 8006256:	d041      	beq.n	80062dc <_free_r+0x8c>
 8006258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625c:	1f0c      	subs	r4, r1, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfb8      	it	lt
 8006262:	18e4      	addlt	r4, r4, r3
 8006264:	f000 f8e0 	bl	8006428 <__malloc_lock>
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <_free_r+0x90>)
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	b933      	cbnz	r3, 800627c <_free_r+0x2c>
 800626e:	6063      	str	r3, [r4, #4]
 8006270:	6014      	str	r4, [r2, #0]
 8006272:	4628      	mov	r0, r5
 8006274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006278:	f000 b8dc 	b.w	8006434 <__malloc_unlock>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d908      	bls.n	8006292 <_free_r+0x42>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	1821      	adds	r1, r4, r0
 8006284:	428b      	cmp	r3, r1
 8006286:	bf01      	itttt	eq
 8006288:	6819      	ldreq	r1, [r3, #0]
 800628a:	685b      	ldreq	r3, [r3, #4]
 800628c:	1809      	addeq	r1, r1, r0
 800628e:	6021      	streq	r1, [r4, #0]
 8006290:	e7ed      	b.n	800626e <_free_r+0x1e>
 8006292:	461a      	mov	r2, r3
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b10b      	cbz	r3, 800629c <_free_r+0x4c>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d9fa      	bls.n	8006292 <_free_r+0x42>
 800629c:	6811      	ldr	r1, [r2, #0]
 800629e:	1850      	adds	r0, r2, r1
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d10b      	bne.n	80062bc <_free_r+0x6c>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	4401      	add	r1, r0
 80062a8:	1850      	adds	r0, r2, r1
 80062aa:	4283      	cmp	r3, r0
 80062ac:	6011      	str	r1, [r2, #0]
 80062ae:	d1e0      	bne.n	8006272 <_free_r+0x22>
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	6053      	str	r3, [r2, #4]
 80062b6:	4408      	add	r0, r1
 80062b8:	6010      	str	r0, [r2, #0]
 80062ba:	e7da      	b.n	8006272 <_free_r+0x22>
 80062bc:	d902      	bls.n	80062c4 <_free_r+0x74>
 80062be:	230c      	movs	r3, #12
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	e7d6      	b.n	8006272 <_free_r+0x22>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	1821      	adds	r1, r4, r0
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf04      	itt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	6063      	str	r3, [r4, #4]
 80062d2:	bf04      	itt	eq
 80062d4:	1809      	addeq	r1, r1, r0
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	6054      	str	r4, [r2, #4]
 80062da:	e7ca      	b.n	8006272 <_free_r+0x22>
 80062dc:	bd38      	pop	{r3, r4, r5, pc}
 80062de:	bf00      	nop
 80062e0:	20000520 	.word	0x20000520

080062e4 <sbrk_aligned>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006324 <sbrk_aligned+0x40>)
 80062e8:	460c      	mov	r4, r1
 80062ea:	6831      	ldr	r1, [r6, #0]
 80062ec:	4605      	mov	r5, r0
 80062ee:	b911      	cbnz	r1, 80062f6 <sbrk_aligned+0x12>
 80062f0:	f001 f9a8 	bl	8007644 <_sbrk_r>
 80062f4:	6030      	str	r0, [r6, #0]
 80062f6:	4621      	mov	r1, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	f001 f9a3 	bl	8007644 <_sbrk_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d103      	bne.n	800630a <sbrk_aligned+0x26>
 8006302:	f04f 34ff 	mov.w	r4, #4294967295
 8006306:	4620      	mov	r0, r4
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	1cc4      	adds	r4, r0, #3
 800630c:	f024 0403 	bic.w	r4, r4, #3
 8006310:	42a0      	cmp	r0, r4
 8006312:	d0f8      	beq.n	8006306 <sbrk_aligned+0x22>
 8006314:	1a21      	subs	r1, r4, r0
 8006316:	4628      	mov	r0, r5
 8006318:	f001 f994 	bl	8007644 <_sbrk_r>
 800631c:	3001      	adds	r0, #1
 800631e:	d1f2      	bne.n	8006306 <sbrk_aligned+0x22>
 8006320:	e7ef      	b.n	8006302 <sbrk_aligned+0x1e>
 8006322:	bf00      	nop
 8006324:	2000051c 	.word	0x2000051c

08006328 <_malloc_r>:
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	1ccd      	adds	r5, r1, #3
 800632e:	f025 0503 	bic.w	r5, r5, #3
 8006332:	3508      	adds	r5, #8
 8006334:	2d0c      	cmp	r5, #12
 8006336:	bf38      	it	cc
 8006338:	250c      	movcc	r5, #12
 800633a:	2d00      	cmp	r5, #0
 800633c:	4606      	mov	r6, r0
 800633e:	db01      	blt.n	8006344 <_malloc_r+0x1c>
 8006340:	42a9      	cmp	r1, r5
 8006342:	d904      	bls.n	800634e <_malloc_r+0x26>
 8006344:	230c      	movs	r3, #12
 8006346:	6033      	str	r3, [r6, #0]
 8006348:	2000      	movs	r0, #0
 800634a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006424 <_malloc_r+0xfc>
 8006352:	f000 f869 	bl	8006428 <__malloc_lock>
 8006356:	f8d8 3000 	ldr.w	r3, [r8]
 800635a:	461c      	mov	r4, r3
 800635c:	bb44      	cbnz	r4, 80063b0 <_malloc_r+0x88>
 800635e:	4629      	mov	r1, r5
 8006360:	4630      	mov	r0, r6
 8006362:	f7ff ffbf 	bl	80062e4 <sbrk_aligned>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	4604      	mov	r4, r0
 800636a:	d158      	bne.n	800641e <_malloc_r+0xf6>
 800636c:	f8d8 4000 	ldr.w	r4, [r8]
 8006370:	4627      	mov	r7, r4
 8006372:	2f00      	cmp	r7, #0
 8006374:	d143      	bne.n	80063fe <_malloc_r+0xd6>
 8006376:	2c00      	cmp	r4, #0
 8006378:	d04b      	beq.n	8006412 <_malloc_r+0xea>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	4639      	mov	r1, r7
 800637e:	4630      	mov	r0, r6
 8006380:	eb04 0903 	add.w	r9, r4, r3
 8006384:	f001 f95e 	bl	8007644 <_sbrk_r>
 8006388:	4581      	cmp	r9, r0
 800638a:	d142      	bne.n	8006412 <_malloc_r+0xea>
 800638c:	6821      	ldr	r1, [r4, #0]
 800638e:	1a6d      	subs	r5, r5, r1
 8006390:	4629      	mov	r1, r5
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ffa6 	bl	80062e4 <sbrk_aligned>
 8006398:	3001      	adds	r0, #1
 800639a:	d03a      	beq.n	8006412 <_malloc_r+0xea>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	442b      	add	r3, r5
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	f8d8 3000 	ldr.w	r3, [r8]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	bb62      	cbnz	r2, 8006404 <_malloc_r+0xdc>
 80063aa:	f8c8 7000 	str.w	r7, [r8]
 80063ae:	e00f      	b.n	80063d0 <_malloc_r+0xa8>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	1b52      	subs	r2, r2, r5
 80063b4:	d420      	bmi.n	80063f8 <_malloc_r+0xd0>
 80063b6:	2a0b      	cmp	r2, #11
 80063b8:	d917      	bls.n	80063ea <_malloc_r+0xc2>
 80063ba:	1961      	adds	r1, r4, r5
 80063bc:	42a3      	cmp	r3, r4
 80063be:	6025      	str	r5, [r4, #0]
 80063c0:	bf18      	it	ne
 80063c2:	6059      	strne	r1, [r3, #4]
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	bf08      	it	eq
 80063c8:	f8c8 1000 	streq.w	r1, [r8]
 80063cc:	5162      	str	r2, [r4, r5]
 80063ce:	604b      	str	r3, [r1, #4]
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 f82f 	bl	8006434 <__malloc_unlock>
 80063d6:	f104 000b 	add.w	r0, r4, #11
 80063da:	1d23      	adds	r3, r4, #4
 80063dc:	f020 0007 	bic.w	r0, r0, #7
 80063e0:	1ac2      	subs	r2, r0, r3
 80063e2:	bf1c      	itt	ne
 80063e4:	1a1b      	subne	r3, r3, r0
 80063e6:	50a3      	strne	r3, [r4, r2]
 80063e8:	e7af      	b.n	800634a <_malloc_r+0x22>
 80063ea:	6862      	ldr	r2, [r4, #4]
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	bf0c      	ite	eq
 80063f0:	f8c8 2000 	streq.w	r2, [r8]
 80063f4:	605a      	strne	r2, [r3, #4]
 80063f6:	e7eb      	b.n	80063d0 <_malloc_r+0xa8>
 80063f8:	4623      	mov	r3, r4
 80063fa:	6864      	ldr	r4, [r4, #4]
 80063fc:	e7ae      	b.n	800635c <_malloc_r+0x34>
 80063fe:	463c      	mov	r4, r7
 8006400:	687f      	ldr	r7, [r7, #4]
 8006402:	e7b6      	b.n	8006372 <_malloc_r+0x4a>
 8006404:	461a      	mov	r2, r3
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	42a3      	cmp	r3, r4
 800640a:	d1fb      	bne.n	8006404 <_malloc_r+0xdc>
 800640c:	2300      	movs	r3, #0
 800640e:	6053      	str	r3, [r2, #4]
 8006410:	e7de      	b.n	80063d0 <_malloc_r+0xa8>
 8006412:	230c      	movs	r3, #12
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	4630      	mov	r0, r6
 8006418:	f000 f80c 	bl	8006434 <__malloc_unlock>
 800641c:	e794      	b.n	8006348 <_malloc_r+0x20>
 800641e:	6005      	str	r5, [r0, #0]
 8006420:	e7d6      	b.n	80063d0 <_malloc_r+0xa8>
 8006422:	bf00      	nop
 8006424:	20000520 	.word	0x20000520

08006428 <__malloc_lock>:
 8006428:	4801      	ldr	r0, [pc, #4]	@ (8006430 <__malloc_lock+0x8>)
 800642a:	f7ff bf0e 	b.w	800624a <__retarget_lock_acquire_recursive>
 800642e:	bf00      	nop
 8006430:	20000518 	.word	0x20000518

08006434 <__malloc_unlock>:
 8006434:	4801      	ldr	r0, [pc, #4]	@ (800643c <__malloc_unlock+0x8>)
 8006436:	f7ff bf09 	b.w	800624c <__retarget_lock_release_recursive>
 800643a:	bf00      	nop
 800643c:	20000518 	.word	0x20000518

08006440 <__ssputs_r>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	688e      	ldr	r6, [r1, #8]
 8006446:	461f      	mov	r7, r3
 8006448:	42be      	cmp	r6, r7
 800644a:	680b      	ldr	r3, [r1, #0]
 800644c:	4682      	mov	sl, r0
 800644e:	460c      	mov	r4, r1
 8006450:	4690      	mov	r8, r2
 8006452:	d82d      	bhi.n	80064b0 <__ssputs_r+0x70>
 8006454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006458:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800645c:	d026      	beq.n	80064ac <__ssputs_r+0x6c>
 800645e:	6965      	ldr	r5, [r4, #20]
 8006460:	6909      	ldr	r1, [r1, #16]
 8006462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006466:	eba3 0901 	sub.w	r9, r3, r1
 800646a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800646e:	1c7b      	adds	r3, r7, #1
 8006470:	444b      	add	r3, r9
 8006472:	106d      	asrs	r5, r5, #1
 8006474:	429d      	cmp	r5, r3
 8006476:	bf38      	it	cc
 8006478:	461d      	movcc	r5, r3
 800647a:	0553      	lsls	r3, r2, #21
 800647c:	d527      	bpl.n	80064ce <__ssputs_r+0x8e>
 800647e:	4629      	mov	r1, r5
 8006480:	f7ff ff52 	bl	8006328 <_malloc_r>
 8006484:	4606      	mov	r6, r0
 8006486:	b360      	cbz	r0, 80064e2 <__ssputs_r+0xa2>
 8006488:	6921      	ldr	r1, [r4, #16]
 800648a:	464a      	mov	r2, r9
 800648c:	f001 f8ea 	bl	8007664 <memcpy>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	6126      	str	r6, [r4, #16]
 800649e:	6165      	str	r5, [r4, #20]
 80064a0:	444e      	add	r6, r9
 80064a2:	eba5 0509 	sub.w	r5, r5, r9
 80064a6:	6026      	str	r6, [r4, #0]
 80064a8:	60a5      	str	r5, [r4, #8]
 80064aa:	463e      	mov	r6, r7
 80064ac:	42be      	cmp	r6, r7
 80064ae:	d900      	bls.n	80064b2 <__ssputs_r+0x72>
 80064b0:	463e      	mov	r6, r7
 80064b2:	6820      	ldr	r0, [r4, #0]
 80064b4:	4632      	mov	r2, r6
 80064b6:	4641      	mov	r1, r8
 80064b8:	f001 f887 	bl	80075ca <memmove>
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	1b9b      	subs	r3, r3, r6
 80064c0:	60a3      	str	r3, [r4, #8]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	4433      	add	r3, r6
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	2000      	movs	r0, #0
 80064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ce:	462a      	mov	r2, r5
 80064d0:	f001 f8d6 	bl	8007680 <_realloc_r>
 80064d4:	4606      	mov	r6, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1e0      	bne.n	800649c <__ssputs_r+0x5c>
 80064da:	6921      	ldr	r1, [r4, #16]
 80064dc:	4650      	mov	r0, sl
 80064de:	f7ff feb7 	bl	8006250 <_free_r>
 80064e2:	230c      	movs	r3, #12
 80064e4:	f8ca 3000 	str.w	r3, [sl]
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e7e9      	b.n	80064ca <__ssputs_r+0x8a>
	...

080064f8 <_svfiprintf_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	4698      	mov	r8, r3
 80064fe:	898b      	ldrh	r3, [r1, #12]
 8006500:	061b      	lsls	r3, r3, #24
 8006502:	b09d      	sub	sp, #116	@ 0x74
 8006504:	4607      	mov	r7, r0
 8006506:	460d      	mov	r5, r1
 8006508:	4614      	mov	r4, r2
 800650a:	d510      	bpl.n	800652e <_svfiprintf_r+0x36>
 800650c:	690b      	ldr	r3, [r1, #16]
 800650e:	b973      	cbnz	r3, 800652e <_svfiprintf_r+0x36>
 8006510:	2140      	movs	r1, #64	@ 0x40
 8006512:	f7ff ff09 	bl	8006328 <_malloc_r>
 8006516:	6028      	str	r0, [r5, #0]
 8006518:	6128      	str	r0, [r5, #16]
 800651a:	b930      	cbnz	r0, 800652a <_svfiprintf_r+0x32>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	b01d      	add	sp, #116	@ 0x74
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	2340      	movs	r3, #64	@ 0x40
 800652c:	616b      	str	r3, [r5, #20]
 800652e:	2300      	movs	r3, #0
 8006530:	9309      	str	r3, [sp, #36]	@ 0x24
 8006532:	2320      	movs	r3, #32
 8006534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006538:	f8cd 800c 	str.w	r8, [sp, #12]
 800653c:	2330      	movs	r3, #48	@ 0x30
 800653e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066dc <_svfiprintf_r+0x1e4>
 8006542:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006546:	f04f 0901 	mov.w	r9, #1
 800654a:	4623      	mov	r3, r4
 800654c:	469a      	mov	sl, r3
 800654e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006552:	b10a      	cbz	r2, 8006558 <_svfiprintf_r+0x60>
 8006554:	2a25      	cmp	r2, #37	@ 0x25
 8006556:	d1f9      	bne.n	800654c <_svfiprintf_r+0x54>
 8006558:	ebba 0b04 	subs.w	fp, sl, r4
 800655c:	d00b      	beq.n	8006576 <_svfiprintf_r+0x7e>
 800655e:	465b      	mov	r3, fp
 8006560:	4622      	mov	r2, r4
 8006562:	4629      	mov	r1, r5
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff ff6b 	bl	8006440 <__ssputs_r>
 800656a:	3001      	adds	r0, #1
 800656c:	f000 80a7 	beq.w	80066be <_svfiprintf_r+0x1c6>
 8006570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006572:	445a      	add	r2, fp
 8006574:	9209      	str	r2, [sp, #36]	@ 0x24
 8006576:	f89a 3000 	ldrb.w	r3, [sl]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 809f 	beq.w	80066be <_svfiprintf_r+0x1c6>
 8006580:	2300      	movs	r3, #0
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658a:	f10a 0a01 	add.w	sl, sl, #1
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	9307      	str	r3, [sp, #28]
 8006592:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006596:	931a      	str	r3, [sp, #104]	@ 0x68
 8006598:	4654      	mov	r4, sl
 800659a:	2205      	movs	r2, #5
 800659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a0:	484e      	ldr	r0, [pc, #312]	@ (80066dc <_svfiprintf_r+0x1e4>)
 80065a2:	f7f9 fe35 	bl	8000210 <memchr>
 80065a6:	9a04      	ldr	r2, [sp, #16]
 80065a8:	b9d8      	cbnz	r0, 80065e2 <_svfiprintf_r+0xea>
 80065aa:	06d0      	lsls	r0, r2, #27
 80065ac:	bf44      	itt	mi
 80065ae:	2320      	movmi	r3, #32
 80065b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b4:	0711      	lsls	r1, r2, #28
 80065b6:	bf44      	itt	mi
 80065b8:	232b      	movmi	r3, #43	@ 0x2b
 80065ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065be:	f89a 3000 	ldrb.w	r3, [sl]
 80065c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c4:	d015      	beq.n	80065f2 <_svfiprintf_r+0xfa>
 80065c6:	9a07      	ldr	r2, [sp, #28]
 80065c8:	4654      	mov	r4, sl
 80065ca:	2000      	movs	r0, #0
 80065cc:	f04f 0c0a 	mov.w	ip, #10
 80065d0:	4621      	mov	r1, r4
 80065d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d6:	3b30      	subs	r3, #48	@ 0x30
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d94b      	bls.n	8006674 <_svfiprintf_r+0x17c>
 80065dc:	b1b0      	cbz	r0, 800660c <_svfiprintf_r+0x114>
 80065de:	9207      	str	r2, [sp, #28]
 80065e0:	e014      	b.n	800660c <_svfiprintf_r+0x114>
 80065e2:	eba0 0308 	sub.w	r3, r0, r8
 80065e6:	fa09 f303 	lsl.w	r3, r9, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	46a2      	mov	sl, r4
 80065f0:	e7d2      	b.n	8006598 <_svfiprintf_r+0xa0>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	9103      	str	r1, [sp, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfbb      	ittet	lt
 80065fe:	425b      	neglt	r3, r3
 8006600:	f042 0202 	orrlt.w	r2, r2, #2
 8006604:	9307      	strge	r3, [sp, #28]
 8006606:	9307      	strlt	r3, [sp, #28]
 8006608:	bfb8      	it	lt
 800660a:	9204      	strlt	r2, [sp, #16]
 800660c:	7823      	ldrb	r3, [r4, #0]
 800660e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006610:	d10a      	bne.n	8006628 <_svfiprintf_r+0x130>
 8006612:	7863      	ldrb	r3, [r4, #1]
 8006614:	2b2a      	cmp	r3, #42	@ 0x2a
 8006616:	d132      	bne.n	800667e <_svfiprintf_r+0x186>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	9203      	str	r2, [sp, #12]
 8006620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006624:	3402      	adds	r4, #2
 8006626:	9305      	str	r3, [sp, #20]
 8006628:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066ec <_svfiprintf_r+0x1f4>
 800662c:	7821      	ldrb	r1, [r4, #0]
 800662e:	2203      	movs	r2, #3
 8006630:	4650      	mov	r0, sl
 8006632:	f7f9 fded 	bl	8000210 <memchr>
 8006636:	b138      	cbz	r0, 8006648 <_svfiprintf_r+0x150>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	eba0 000a 	sub.w	r0, r0, sl
 800663e:	2240      	movs	r2, #64	@ 0x40
 8006640:	4082      	lsls	r2, r0
 8006642:	4313      	orrs	r3, r2
 8006644:	3401      	adds	r4, #1
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664c:	4824      	ldr	r0, [pc, #144]	@ (80066e0 <_svfiprintf_r+0x1e8>)
 800664e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006652:	2206      	movs	r2, #6
 8006654:	f7f9 fddc 	bl	8000210 <memchr>
 8006658:	2800      	cmp	r0, #0
 800665a:	d036      	beq.n	80066ca <_svfiprintf_r+0x1d2>
 800665c:	4b21      	ldr	r3, [pc, #132]	@ (80066e4 <_svfiprintf_r+0x1ec>)
 800665e:	bb1b      	cbnz	r3, 80066a8 <_svfiprintf_r+0x1b0>
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	3307      	adds	r3, #7
 8006664:	f023 0307 	bic.w	r3, r3, #7
 8006668:	3308      	adds	r3, #8
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666e:	4433      	add	r3, r6
 8006670:	9309      	str	r3, [sp, #36]	@ 0x24
 8006672:	e76a      	b.n	800654a <_svfiprintf_r+0x52>
 8006674:	fb0c 3202 	mla	r2, ip, r2, r3
 8006678:	460c      	mov	r4, r1
 800667a:	2001      	movs	r0, #1
 800667c:	e7a8      	b.n	80065d0 <_svfiprintf_r+0xd8>
 800667e:	2300      	movs	r3, #0
 8006680:	3401      	adds	r4, #1
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	4619      	mov	r1, r3
 8006686:	f04f 0c0a 	mov.w	ip, #10
 800668a:	4620      	mov	r0, r4
 800668c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006690:	3a30      	subs	r2, #48	@ 0x30
 8006692:	2a09      	cmp	r2, #9
 8006694:	d903      	bls.n	800669e <_svfiprintf_r+0x1a6>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0c6      	beq.n	8006628 <_svfiprintf_r+0x130>
 800669a:	9105      	str	r1, [sp, #20]
 800669c:	e7c4      	b.n	8006628 <_svfiprintf_r+0x130>
 800669e:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a2:	4604      	mov	r4, r0
 80066a4:	2301      	movs	r3, #1
 80066a6:	e7f0      	b.n	800668a <_svfiprintf_r+0x192>
 80066a8:	ab03      	add	r3, sp, #12
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	462a      	mov	r2, r5
 80066ae:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <_svfiprintf_r+0x1f0>)
 80066b0:	a904      	add	r1, sp, #16
 80066b2:	4638      	mov	r0, r7
 80066b4:	f3af 8000 	nop.w
 80066b8:	1c42      	adds	r2, r0, #1
 80066ba:	4606      	mov	r6, r0
 80066bc:	d1d6      	bne.n	800666c <_svfiprintf_r+0x174>
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	065b      	lsls	r3, r3, #25
 80066c2:	f53f af2d 	bmi.w	8006520 <_svfiprintf_r+0x28>
 80066c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c8:	e72c      	b.n	8006524 <_svfiprintf_r+0x2c>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <_svfiprintf_r+0x1f0>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4638      	mov	r0, r7
 80066d6:	f000 fb8b 	bl	8006df0 <_printf_i>
 80066da:	e7ed      	b.n	80066b8 <_svfiprintf_r+0x1c0>
 80066dc:	08007a78 	.word	0x08007a78
 80066e0:	08007a82 	.word	0x08007a82
 80066e4:	00000000 	.word	0x00000000
 80066e8:	08006441 	.word	0x08006441
 80066ec:	08007a7e 	.word	0x08007a7e

080066f0 <_sungetc_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	1c4b      	adds	r3, r1, #1
 80066f4:	4614      	mov	r4, r2
 80066f6:	d103      	bne.n	8006700 <_sungetc_r+0x10>
 80066f8:	f04f 35ff 	mov.w	r5, #4294967295
 80066fc:	4628      	mov	r0, r5
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	8993      	ldrh	r3, [r2, #12]
 8006702:	f023 0320 	bic.w	r3, r3, #32
 8006706:	8193      	strh	r3, [r2, #12]
 8006708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800670a:	6852      	ldr	r2, [r2, #4]
 800670c:	b2cd      	uxtb	r5, r1
 800670e:	b18b      	cbz	r3, 8006734 <_sungetc_r+0x44>
 8006710:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006712:	4293      	cmp	r3, r2
 8006714:	dd08      	ble.n	8006728 <_sungetc_r+0x38>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	6022      	str	r2, [r4, #0]
 800671c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	3301      	adds	r3, #1
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	e7e9      	b.n	80066fc <_sungetc_r+0xc>
 8006728:	4621      	mov	r1, r4
 800672a:	f000 ff14 	bl	8007556 <__submore>
 800672e:	2800      	cmp	r0, #0
 8006730:	d0f1      	beq.n	8006716 <_sungetc_r+0x26>
 8006732:	e7e1      	b.n	80066f8 <_sungetc_r+0x8>
 8006734:	6921      	ldr	r1, [r4, #16]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	b151      	cbz	r1, 8006750 <_sungetc_r+0x60>
 800673a:	4299      	cmp	r1, r3
 800673c:	d208      	bcs.n	8006750 <_sungetc_r+0x60>
 800673e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006742:	42a9      	cmp	r1, r5
 8006744:	d104      	bne.n	8006750 <_sungetc_r+0x60>
 8006746:	3b01      	subs	r3, #1
 8006748:	3201      	adds	r2, #1
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	6062      	str	r2, [r4, #4]
 800674e:	e7d5      	b.n	80066fc <_sungetc_r+0xc>
 8006750:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006758:	6363      	str	r3, [r4, #52]	@ 0x34
 800675a:	2303      	movs	r3, #3
 800675c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800675e:	4623      	mov	r3, r4
 8006760:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	2301      	movs	r3, #1
 8006768:	e7dc      	b.n	8006724 <_sungetc_r+0x34>

0800676a <__ssrefill_r>:
 800676a:	b510      	push	{r4, lr}
 800676c:	460c      	mov	r4, r1
 800676e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006770:	b169      	cbz	r1, 800678e <__ssrefill_r+0x24>
 8006772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006776:	4299      	cmp	r1, r3
 8006778:	d001      	beq.n	800677e <__ssrefill_r+0x14>
 800677a:	f7ff fd69 	bl	8006250 <_free_r>
 800677e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	2000      	movs	r0, #0
 8006784:	6360      	str	r0, [r4, #52]	@ 0x34
 8006786:	b113      	cbz	r3, 800678e <__ssrefill_r+0x24>
 8006788:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd10      	pop	{r4, pc}
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0320 	orr.w	r3, r3, #32
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	f04f 30ff 	mov.w	r0, #4294967295
 80067a2:	e7f3      	b.n	800678c <__ssrefill_r+0x22>

080067a4 <__ssvfiscanf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	460c      	mov	r4, r1
 80067aa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80067ae:	2100      	movs	r1, #0
 80067b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80067b4:	49a6      	ldr	r1, [pc, #664]	@ (8006a50 <__ssvfiscanf_r+0x2ac>)
 80067b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80067b8:	f10d 0804 	add.w	r8, sp, #4
 80067bc:	49a5      	ldr	r1, [pc, #660]	@ (8006a54 <__ssvfiscanf_r+0x2b0>)
 80067be:	4fa6      	ldr	r7, [pc, #664]	@ (8006a58 <__ssvfiscanf_r+0x2b4>)
 80067c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80067c4:	4606      	mov	r6, r0
 80067c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f892 9000 	ldrb.w	r9, [r2]
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	f000 8158 	beq.w	8006a86 <__ssvfiscanf_r+0x2e2>
 80067d6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80067da:	f013 0308 	ands.w	r3, r3, #8
 80067de:	f102 0501 	add.w	r5, r2, #1
 80067e2:	d019      	beq.n	8006818 <__ssvfiscanf_r+0x74>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dd0f      	ble.n	800680a <__ssvfiscanf_r+0x66>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	5cba      	ldrb	r2, [r7, r2]
 80067f0:	0712      	lsls	r2, r2, #28
 80067f2:	d401      	bmi.n	80067f8 <__ssvfiscanf_r+0x54>
 80067f4:	462a      	mov	r2, r5
 80067f6:	e7e8      	b.n	80067ca <__ssvfiscanf_r+0x26>
 80067f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80067fa:	3201      	adds	r2, #1
 80067fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	3301      	adds	r3, #1
 8006802:	3a01      	subs	r2, #1
 8006804:	6062      	str	r2, [r4, #4]
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	e7ec      	b.n	80067e4 <__ssvfiscanf_r+0x40>
 800680a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800680c:	4621      	mov	r1, r4
 800680e:	4630      	mov	r0, r6
 8006810:	4798      	blx	r3
 8006812:	2800      	cmp	r0, #0
 8006814:	d0e9      	beq.n	80067ea <__ssvfiscanf_r+0x46>
 8006816:	e7ed      	b.n	80067f4 <__ssvfiscanf_r+0x50>
 8006818:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800681c:	f040 8085 	bne.w	800692a <__ssvfiscanf_r+0x186>
 8006820:	9341      	str	r3, [sp, #260]	@ 0x104
 8006822:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006824:	7853      	ldrb	r3, [r2, #1]
 8006826:	2b2a      	cmp	r3, #42	@ 0x2a
 8006828:	bf02      	ittt	eq
 800682a:	2310      	moveq	r3, #16
 800682c:	1c95      	addeq	r5, r2, #2
 800682e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006830:	220a      	movs	r2, #10
 8006832:	46aa      	mov	sl, r5
 8006834:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006838:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800683c:	2b09      	cmp	r3, #9
 800683e:	d91e      	bls.n	800687e <__ssvfiscanf_r+0xda>
 8006840:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8006a5c <__ssvfiscanf_r+0x2b8>
 8006844:	2203      	movs	r2, #3
 8006846:	4658      	mov	r0, fp
 8006848:	f7f9 fce2 	bl	8000210 <memchr>
 800684c:	b138      	cbz	r0, 800685e <__ssvfiscanf_r+0xba>
 800684e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006850:	eba0 000b 	sub.w	r0, r0, fp
 8006854:	2301      	movs	r3, #1
 8006856:	4083      	lsls	r3, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	9341      	str	r3, [sp, #260]	@ 0x104
 800685c:	4655      	mov	r5, sl
 800685e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006862:	2b78      	cmp	r3, #120	@ 0x78
 8006864:	d806      	bhi.n	8006874 <__ssvfiscanf_r+0xd0>
 8006866:	2b57      	cmp	r3, #87	@ 0x57
 8006868:	d810      	bhi.n	800688c <__ssvfiscanf_r+0xe8>
 800686a:	2b25      	cmp	r3, #37	@ 0x25
 800686c:	d05d      	beq.n	800692a <__ssvfiscanf_r+0x186>
 800686e:	d857      	bhi.n	8006920 <__ssvfiscanf_r+0x17c>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d075      	beq.n	8006960 <__ssvfiscanf_r+0x1bc>
 8006874:	2303      	movs	r3, #3
 8006876:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006878:	230a      	movs	r3, #10
 800687a:	9342      	str	r3, [sp, #264]	@ 0x108
 800687c:	e088      	b.n	8006990 <__ssvfiscanf_r+0x1ec>
 800687e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006880:	fb02 1103 	mla	r1, r2, r3, r1
 8006884:	3930      	subs	r1, #48	@ 0x30
 8006886:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006888:	4655      	mov	r5, sl
 800688a:	e7d2      	b.n	8006832 <__ssvfiscanf_r+0x8e>
 800688c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006890:	2a20      	cmp	r2, #32
 8006892:	d8ef      	bhi.n	8006874 <__ssvfiscanf_r+0xd0>
 8006894:	a101      	add	r1, pc, #4	@ (adr r1, 800689c <__ssvfiscanf_r+0xf8>)
 8006896:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800689a:	bf00      	nop
 800689c:	0800696f 	.word	0x0800696f
 80068a0:	08006875 	.word	0x08006875
 80068a4:	08006875 	.word	0x08006875
 80068a8:	080069c9 	.word	0x080069c9
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	08006875 	.word	0x08006875
 80068bc:	08006875 	.word	0x08006875
 80068c0:	08006875 	.word	0x08006875
 80068c4:	08006875 	.word	0x08006875
 80068c8:	080069df 	.word	0x080069df
 80068cc:	080069c5 	.word	0x080069c5
 80068d0:	08006927 	.word	0x08006927
 80068d4:	08006927 	.word	0x08006927
 80068d8:	08006927 	.word	0x08006927
 80068dc:	08006875 	.word	0x08006875
 80068e0:	08006981 	.word	0x08006981
 80068e4:	08006875 	.word	0x08006875
 80068e8:	08006875 	.word	0x08006875
 80068ec:	08006875 	.word	0x08006875
 80068f0:	08006875 	.word	0x08006875
 80068f4:	080069ef 	.word	0x080069ef
 80068f8:	08006989 	.word	0x08006989
 80068fc:	08006967 	.word	0x08006967
 8006900:	08006875 	.word	0x08006875
 8006904:	08006875 	.word	0x08006875
 8006908:	080069eb 	.word	0x080069eb
 800690c:	08006875 	.word	0x08006875
 8006910:	080069c5 	.word	0x080069c5
 8006914:	08006875 	.word	0x08006875
 8006918:	08006875 	.word	0x08006875
 800691c:	0800696f 	.word	0x0800696f
 8006920:	3b45      	subs	r3, #69	@ 0x45
 8006922:	2b02      	cmp	r3, #2
 8006924:	d8a6      	bhi.n	8006874 <__ssvfiscanf_r+0xd0>
 8006926:	2305      	movs	r3, #5
 8006928:	e031      	b.n	800698e <__ssvfiscanf_r+0x1ea>
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd0d      	ble.n	800694c <__ssvfiscanf_r+0x1a8>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	454a      	cmp	r2, r9
 8006936:	f040 80a6 	bne.w	8006a86 <__ssvfiscanf_r+0x2e2>
 800693a:	3301      	adds	r3, #1
 800693c:	6862      	ldr	r2, [r4, #4]
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006942:	3a01      	subs	r2, #1
 8006944:	3301      	adds	r3, #1
 8006946:	6062      	str	r2, [r4, #4]
 8006948:	9345      	str	r3, [sp, #276]	@ 0x114
 800694a:	e753      	b.n	80067f4 <__ssvfiscanf_r+0x50>
 800694c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	4798      	blx	r3
 8006954:	2800      	cmp	r0, #0
 8006956:	d0eb      	beq.n	8006930 <__ssvfiscanf_r+0x18c>
 8006958:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800695a:	2800      	cmp	r0, #0
 800695c:	f040 808b 	bne.w	8006a76 <__ssvfiscanf_r+0x2d2>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e08b      	b.n	8006a7e <__ssvfiscanf_r+0x2da>
 8006966:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006968:	f042 0220 	orr.w	r2, r2, #32
 800696c:	9241      	str	r2, [sp, #260]	@ 0x104
 800696e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006974:	9241      	str	r2, [sp, #260]	@ 0x104
 8006976:	2210      	movs	r2, #16
 8006978:	2b6e      	cmp	r3, #110	@ 0x6e
 800697a:	9242      	str	r2, [sp, #264]	@ 0x108
 800697c:	d902      	bls.n	8006984 <__ssvfiscanf_r+0x1e0>
 800697e:	e005      	b.n	800698c <__ssvfiscanf_r+0x1e8>
 8006980:	2300      	movs	r3, #0
 8006982:	9342      	str	r3, [sp, #264]	@ 0x108
 8006984:	2303      	movs	r3, #3
 8006986:	e002      	b.n	800698e <__ssvfiscanf_r+0x1ea>
 8006988:	2308      	movs	r3, #8
 800698a:	9342      	str	r3, [sp, #264]	@ 0x108
 800698c:	2304      	movs	r3, #4
 800698e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd39      	ble.n	8006a0a <__ssvfiscanf_r+0x266>
 8006996:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006998:	0659      	lsls	r1, r3, #25
 800699a:	d404      	bmi.n	80069a6 <__ssvfiscanf_r+0x202>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	781a      	ldrb	r2, [r3, #0]
 80069a0:	5cba      	ldrb	r2, [r7, r2]
 80069a2:	0712      	lsls	r2, r2, #28
 80069a4:	d438      	bmi.n	8006a18 <__ssvfiscanf_r+0x274>
 80069a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	dc47      	bgt.n	8006a3c <__ssvfiscanf_r+0x298>
 80069ac:	466b      	mov	r3, sp
 80069ae:	4622      	mov	r2, r4
 80069b0:	a941      	add	r1, sp, #260	@ 0x104
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 fb3a 	bl	800702c <_scanf_chars>
 80069b8:	2801      	cmp	r0, #1
 80069ba:	d064      	beq.n	8006a86 <__ssvfiscanf_r+0x2e2>
 80069bc:	2802      	cmp	r0, #2
 80069be:	f47f af19 	bne.w	80067f4 <__ssvfiscanf_r+0x50>
 80069c2:	e7c9      	b.n	8006958 <__ssvfiscanf_r+0x1b4>
 80069c4:	220a      	movs	r2, #10
 80069c6:	e7d7      	b.n	8006978 <__ssvfiscanf_r+0x1d4>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4640      	mov	r0, r8
 80069cc:	f000 fd8a 	bl	80074e4 <__sccl>
 80069d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80069d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80069d8:	4605      	mov	r5, r0
 80069da:	2301      	movs	r3, #1
 80069dc:	e7d7      	b.n	800698e <__ssvfiscanf_r+0x1ea>
 80069de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80069e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80069e6:	2300      	movs	r3, #0
 80069e8:	e7d1      	b.n	800698e <__ssvfiscanf_r+0x1ea>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e7cf      	b.n	800698e <__ssvfiscanf_r+0x1ea>
 80069ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80069f0:	06c3      	lsls	r3, r0, #27
 80069f2:	f53f aeff 	bmi.w	80067f4 <__ssvfiscanf_r+0x50>
 80069f6:	9b00      	ldr	r3, [sp, #0]
 80069f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80069fa:	1d19      	adds	r1, r3, #4
 80069fc:	9100      	str	r1, [sp, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	07c0      	lsls	r0, r0, #31
 8006a02:	bf4c      	ite	mi
 8006a04:	801a      	strhmi	r2, [r3, #0]
 8006a06:	601a      	strpl	r2, [r3, #0]
 8006a08:	e6f4      	b.n	80067f4 <__ssvfiscanf_r+0x50>
 8006a0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4798      	blx	r3
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0bf      	beq.n	8006996 <__ssvfiscanf_r+0x1f2>
 8006a16:	e79f      	b.n	8006958 <__ssvfiscanf_r+0x1b4>
 8006a18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	3a01      	subs	r2, #1
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	6062      	str	r2, [r4, #4]
 8006a26:	dd02      	ble.n	8006a2e <__ssvfiscanf_r+0x28a>
 8006a28:	3301      	adds	r3, #1
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	e7b6      	b.n	800699c <__ssvfiscanf_r+0x1f8>
 8006a2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a30:	4621      	mov	r1, r4
 8006a32:	4630      	mov	r0, r6
 8006a34:	4798      	blx	r3
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d0b0      	beq.n	800699c <__ssvfiscanf_r+0x1f8>
 8006a3a:	e78d      	b.n	8006958 <__ssvfiscanf_r+0x1b4>
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	dc0f      	bgt.n	8006a60 <__ssvfiscanf_r+0x2bc>
 8006a40:	466b      	mov	r3, sp
 8006a42:	4622      	mov	r2, r4
 8006a44:	a941      	add	r1, sp, #260	@ 0x104
 8006a46:	4630      	mov	r0, r6
 8006a48:	f000 fb4a 	bl	80070e0 <_scanf_i>
 8006a4c:	e7b4      	b.n	80069b8 <__ssvfiscanf_r+0x214>
 8006a4e:	bf00      	nop
 8006a50:	080066f1 	.word	0x080066f1
 8006a54:	0800676b 	.word	0x0800676b
 8006a58:	08007ac7 	.word	0x08007ac7
 8006a5c:	08007a7e 	.word	0x08007a7e
 8006a60:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <__ssvfiscanf_r+0x2e8>)
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f43f aec6 	beq.w	80067f4 <__ssvfiscanf_r+0x50>
 8006a68:	466b      	mov	r3, sp
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	a941      	add	r1, sp, #260	@ 0x104
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f3af 8000 	nop.w
 8006a74:	e7a0      	b.n	80069b8 <__ssvfiscanf_r+0x214>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	065b      	lsls	r3, r3, #25
 8006a7a:	f53f af71 	bmi.w	8006960 <__ssvfiscanf_r+0x1bc>
 8006a7e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a86:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006a88:	e7f9      	b.n	8006a7e <__ssvfiscanf_r+0x2da>
 8006a8a:	bf00      	nop
 8006a8c:	00000000 	.word	0x00000000

08006a90 <__sfputc_r>:
 8006a90:	6893      	ldr	r3, [r2, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	b410      	push	{r4}
 8006a98:	6093      	str	r3, [r2, #8]
 8006a9a:	da08      	bge.n	8006aae <__sfputc_r+0x1e>
 8006a9c:	6994      	ldr	r4, [r2, #24]
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	db01      	blt.n	8006aa6 <__sfputc_r+0x16>
 8006aa2:	290a      	cmp	r1, #10
 8006aa4:	d103      	bne.n	8006aae <__sfputc_r+0x1e>
 8006aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aaa:	f7ff bac0 	b.w	800602e <__swbuf_r>
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	1c58      	adds	r0, r3, #1
 8006ab2:	6010      	str	r0, [r2, #0]
 8006ab4:	7019      	strb	r1, [r3, #0]
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <__sfputs_r>:
 8006abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	18d5      	adds	r5, r2, r3
 8006ac8:	42ac      	cmp	r4, r5
 8006aca:	d101      	bne.n	8006ad0 <__sfputs_r+0x12>
 8006acc:	2000      	movs	r0, #0
 8006ace:	e007      	b.n	8006ae0 <__sfputs_r+0x22>
 8006ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff ffda 	bl	8006a90 <__sfputc_r>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d1f3      	bne.n	8006ac8 <__sfputs_r+0xa>
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae4 <_vfiprintf_r>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	460d      	mov	r5, r1
 8006aea:	b09d      	sub	sp, #116	@ 0x74
 8006aec:	4614      	mov	r4, r2
 8006aee:	4698      	mov	r8, r3
 8006af0:	4606      	mov	r6, r0
 8006af2:	b118      	cbz	r0, 8006afc <_vfiprintf_r+0x18>
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	b90b      	cbnz	r3, 8006afc <_vfiprintf_r+0x18>
 8006af8:	f7ff f960 	bl	8005dbc <__sinit>
 8006afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0a:	f7ff fb9e 	bl	800624a <__retarget_lock_acquire_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	071b      	lsls	r3, r3, #28
 8006b12:	d501      	bpl.n	8006b18 <_vfiprintf_r+0x34>
 8006b14:	692b      	ldr	r3, [r5, #16]
 8006b16:	b99b      	cbnz	r3, 8006b40 <_vfiprintf_r+0x5c>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fac6 	bl	80060ac <__swsetup_r>
 8006b20:	b170      	cbz	r0, 8006b40 <_vfiprintf_r+0x5c>
 8006b22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b24:	07dc      	lsls	r4, r3, #31
 8006b26:	d504      	bpl.n	8006b32 <_vfiprintf_r+0x4e>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b01d      	add	sp, #116	@ 0x74
 8006b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	0598      	lsls	r0, r3, #22
 8006b36:	d4f7      	bmi.n	8006b28 <_vfiprintf_r+0x44>
 8006b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b3a:	f7ff fb87 	bl	800624c <__retarget_lock_release_recursive>
 8006b3e:	e7f3      	b.n	8006b28 <_vfiprintf_r+0x44>
 8006b40:	2300      	movs	r3, #0
 8006b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b44:	2320      	movs	r3, #32
 8006b46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4e:	2330      	movs	r3, #48	@ 0x30
 8006b50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d00 <_vfiprintf_r+0x21c>
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	469a      	mov	sl, r3
 8006b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b64:	b10a      	cbz	r2, 8006b6a <_vfiprintf_r+0x86>
 8006b66:	2a25      	cmp	r2, #37	@ 0x25
 8006b68:	d1f9      	bne.n	8006b5e <_vfiprintf_r+0x7a>
 8006b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6e:	d00b      	beq.n	8006b88 <_vfiprintf_r+0xa4>
 8006b70:	465b      	mov	r3, fp
 8006b72:	4622      	mov	r2, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ffa1 	bl	8006abe <__sfputs_r>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f000 80a7 	beq.w	8006cd0 <_vfiprintf_r+0x1ec>
 8006b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b84:	445a      	add	r2, fp
 8006b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b88:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 809f 	beq.w	8006cd0 <_vfiprintf_r+0x1ec>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ba8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006baa:	4654      	mov	r4, sl
 8006bac:	2205      	movs	r2, #5
 8006bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb2:	4853      	ldr	r0, [pc, #332]	@ (8006d00 <_vfiprintf_r+0x21c>)
 8006bb4:	f7f9 fb2c 	bl	8000210 <memchr>
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	b9d8      	cbnz	r0, 8006bf4 <_vfiprintf_r+0x110>
 8006bbc:	06d1      	lsls	r1, r2, #27
 8006bbe:	bf44      	itt	mi
 8006bc0:	2320      	movmi	r3, #32
 8006bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc6:	0713      	lsls	r3, r2, #28
 8006bc8:	bf44      	itt	mi
 8006bca:	232b      	movmi	r3, #43	@ 0x2b
 8006bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd6:	d015      	beq.n	8006c04 <_vfiprintf_r+0x120>
 8006bd8:	9a07      	ldr	r2, [sp, #28]
 8006bda:	4654      	mov	r4, sl
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f04f 0c0a 	mov.w	ip, #10
 8006be2:	4621      	mov	r1, r4
 8006be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be8:	3b30      	subs	r3, #48	@ 0x30
 8006bea:	2b09      	cmp	r3, #9
 8006bec:	d94b      	bls.n	8006c86 <_vfiprintf_r+0x1a2>
 8006bee:	b1b0      	cbz	r0, 8006c1e <_vfiprintf_r+0x13a>
 8006bf0:	9207      	str	r2, [sp, #28]
 8006bf2:	e014      	b.n	8006c1e <_vfiprintf_r+0x13a>
 8006bf4:	eba0 0308 	sub.w	r3, r0, r8
 8006bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	46a2      	mov	sl, r4
 8006c02:	e7d2      	b.n	8006baa <_vfiprintf_r+0xc6>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1d19      	adds	r1, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9103      	str	r1, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbb      	ittet	lt
 8006c10:	425b      	neglt	r3, r3
 8006c12:	f042 0202 	orrlt.w	r2, r2, #2
 8006c16:	9307      	strge	r3, [sp, #28]
 8006c18:	9307      	strlt	r3, [sp, #28]
 8006c1a:	bfb8      	it	lt
 8006c1c:	9204      	strlt	r2, [sp, #16]
 8006c1e:	7823      	ldrb	r3, [r4, #0]
 8006c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c22:	d10a      	bne.n	8006c3a <_vfiprintf_r+0x156>
 8006c24:	7863      	ldrb	r3, [r4, #1]
 8006c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c28:	d132      	bne.n	8006c90 <_vfiprintf_r+0x1ac>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	9203      	str	r2, [sp, #12]
 8006c32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c36:	3402      	adds	r4, #2
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d10 <_vfiprintf_r+0x22c>
 8006c3e:	7821      	ldrb	r1, [r4, #0]
 8006c40:	2203      	movs	r2, #3
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7f9 fae4 	bl	8000210 <memchr>
 8006c48:	b138      	cbz	r0, 8006c5a <_vfiprintf_r+0x176>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	eba0 000a 	sub.w	r0, r0, sl
 8006c50:	2240      	movs	r2, #64	@ 0x40
 8006c52:	4082      	lsls	r2, r0
 8006c54:	4313      	orrs	r3, r2
 8006c56:	3401      	adds	r4, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5e:	4829      	ldr	r0, [pc, #164]	@ (8006d04 <_vfiprintf_r+0x220>)
 8006c60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c64:	2206      	movs	r2, #6
 8006c66:	f7f9 fad3 	bl	8000210 <memchr>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d03f      	beq.n	8006cee <_vfiprintf_r+0x20a>
 8006c6e:	4b26      	ldr	r3, [pc, #152]	@ (8006d08 <_vfiprintf_r+0x224>)
 8006c70:	bb1b      	cbnz	r3, 8006cba <_vfiprintf_r+0x1d6>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	3307      	adds	r3, #7
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c80:	443b      	add	r3, r7
 8006c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c84:	e76a      	b.n	8006b5c <_vfiprintf_r+0x78>
 8006c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	e7a8      	b.n	8006be2 <_vfiprintf_r+0xfe>
 8006c90:	2300      	movs	r3, #0
 8006c92:	3401      	adds	r4, #1
 8006c94:	9305      	str	r3, [sp, #20]
 8006c96:	4619      	mov	r1, r3
 8006c98:	f04f 0c0a 	mov.w	ip, #10
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca2:	3a30      	subs	r2, #48	@ 0x30
 8006ca4:	2a09      	cmp	r2, #9
 8006ca6:	d903      	bls.n	8006cb0 <_vfiprintf_r+0x1cc>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0c6      	beq.n	8006c3a <_vfiprintf_r+0x156>
 8006cac:	9105      	str	r1, [sp, #20]
 8006cae:	e7c4      	b.n	8006c3a <_vfiprintf_r+0x156>
 8006cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e7f0      	b.n	8006c9c <_vfiprintf_r+0x1b8>
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <_vfiprintf_r+0x228>)
 8006cc2:	a904      	add	r1, sp, #16
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f3af 8000 	nop.w
 8006cca:	4607      	mov	r7, r0
 8006ccc:	1c78      	adds	r0, r7, #1
 8006cce:	d1d6      	bne.n	8006c7e <_vfiprintf_r+0x19a>
 8006cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cd2:	07d9      	lsls	r1, r3, #31
 8006cd4:	d405      	bmi.n	8006ce2 <_vfiprintf_r+0x1fe>
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	059a      	lsls	r2, r3, #22
 8006cda:	d402      	bmi.n	8006ce2 <_vfiprintf_r+0x1fe>
 8006cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cde:	f7ff fab5 	bl	800624c <__retarget_lock_release_recursive>
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	065b      	lsls	r3, r3, #25
 8006ce6:	f53f af1f 	bmi.w	8006b28 <_vfiprintf_r+0x44>
 8006cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cec:	e71e      	b.n	8006b2c <_vfiprintf_r+0x48>
 8006cee:	ab03      	add	r3, sp, #12
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	462a      	mov	r2, r5
 8006cf4:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <_vfiprintf_r+0x228>)
 8006cf6:	a904      	add	r1, sp, #16
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f879 	bl	8006df0 <_printf_i>
 8006cfe:	e7e4      	b.n	8006cca <_vfiprintf_r+0x1e6>
 8006d00:	08007a78 	.word	0x08007a78
 8006d04:	08007a82 	.word	0x08007a82
 8006d08:	00000000 	.word	0x00000000
 8006d0c:	08006abf 	.word	0x08006abf
 8006d10:	08007a7e 	.word	0x08007a7e

08006d14 <_printf_common>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	4616      	mov	r6, r2
 8006d1a:	4698      	mov	r8, r3
 8006d1c:	688a      	ldr	r2, [r1, #8]
 8006d1e:	690b      	ldr	r3, [r1, #16]
 8006d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	bfb8      	it	lt
 8006d28:	4613      	movlt	r3, r2
 8006d2a:	6033      	str	r3, [r6, #0]
 8006d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d30:	4607      	mov	r7, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	b10a      	cbz	r2, 8006d3a <_printf_common+0x26>
 8006d36:	3301      	adds	r3, #1
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	0699      	lsls	r1, r3, #26
 8006d3e:	bf42      	ittt	mi
 8006d40:	6833      	ldrmi	r3, [r6, #0]
 8006d42:	3302      	addmi	r3, #2
 8006d44:	6033      	strmi	r3, [r6, #0]
 8006d46:	6825      	ldr	r5, [r4, #0]
 8006d48:	f015 0506 	ands.w	r5, r5, #6
 8006d4c:	d106      	bne.n	8006d5c <_printf_common+0x48>
 8006d4e:	f104 0a19 	add.w	sl, r4, #25
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	6832      	ldr	r2, [r6, #0]
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	dc26      	bgt.n	8006daa <_printf_common+0x96>
 8006d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d60:	6822      	ldr	r2, [r4, #0]
 8006d62:	3b00      	subs	r3, #0
 8006d64:	bf18      	it	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	0692      	lsls	r2, r2, #26
 8006d6a:	d42b      	bmi.n	8006dc4 <_printf_common+0xb0>
 8006d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d70:	4641      	mov	r1, r8
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c8      	blx	r9
 8006d76:	3001      	adds	r0, #1
 8006d78:	d01e      	beq.n	8006db8 <_printf_common+0xa4>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	6922      	ldr	r2, [r4, #16]
 8006d7e:	f003 0306 	and.w	r3, r3, #6
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	bf02      	ittt	eq
 8006d86:	68e5      	ldreq	r5, [r4, #12]
 8006d88:	6833      	ldreq	r3, [r6, #0]
 8006d8a:	1aed      	subeq	r5, r5, r3
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	bf0c      	ite	eq
 8006d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d94:	2500      	movne	r5, #0
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bfc4      	itt	gt
 8006d9a:	1a9b      	subgt	r3, r3, r2
 8006d9c:	18ed      	addgt	r5, r5, r3
 8006d9e:	2600      	movs	r6, #0
 8006da0:	341a      	adds	r4, #26
 8006da2:	42b5      	cmp	r5, r6
 8006da4:	d11a      	bne.n	8006ddc <_printf_common+0xc8>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e008      	b.n	8006dbc <_printf_common+0xa8>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4652      	mov	r2, sl
 8006dae:	4641      	mov	r1, r8
 8006db0:	4638      	mov	r0, r7
 8006db2:	47c8      	blx	r9
 8006db4:	3001      	adds	r0, #1
 8006db6:	d103      	bne.n	8006dc0 <_printf_common+0xac>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	e7c6      	b.n	8006d52 <_printf_common+0x3e>
 8006dc4:	18e1      	adds	r1, r4, r3
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	2030      	movs	r0, #48	@ 0x30
 8006dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dce:	4422      	add	r2, r4
 8006dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dd8:	3302      	adds	r3, #2
 8006dda:	e7c7      	b.n	8006d6c <_printf_common+0x58>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4622      	mov	r2, r4
 8006de0:	4641      	mov	r1, r8
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c8      	blx	r9
 8006de6:	3001      	adds	r0, #1
 8006de8:	d0e6      	beq.n	8006db8 <_printf_common+0xa4>
 8006dea:	3601      	adds	r6, #1
 8006dec:	e7d9      	b.n	8006da2 <_printf_common+0x8e>
	...

08006df0 <_printf_i>:
 8006df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	7e0f      	ldrb	r7, [r1, #24]
 8006df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006df8:	2f78      	cmp	r7, #120	@ 0x78
 8006dfa:	4691      	mov	r9, r2
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	469a      	mov	sl, r3
 8006e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e06:	d807      	bhi.n	8006e18 <_printf_i+0x28>
 8006e08:	2f62      	cmp	r7, #98	@ 0x62
 8006e0a:	d80a      	bhi.n	8006e22 <_printf_i+0x32>
 8006e0c:	2f00      	cmp	r7, #0
 8006e0e:	f000 80d1 	beq.w	8006fb4 <_printf_i+0x1c4>
 8006e12:	2f58      	cmp	r7, #88	@ 0x58
 8006e14:	f000 80b8 	beq.w	8006f88 <_printf_i+0x198>
 8006e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e20:	e03a      	b.n	8006e98 <_printf_i+0xa8>
 8006e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e26:	2b15      	cmp	r3, #21
 8006e28:	d8f6      	bhi.n	8006e18 <_printf_i+0x28>
 8006e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006e30 <_printf_i+0x40>)
 8006e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e30:	08006e89 	.word	0x08006e89
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e19 	.word	0x08006e19
 8006e3c:	08006e19 	.word	0x08006e19
 8006e40:	08006e19 	.word	0x08006e19
 8006e44:	08006e19 	.word	0x08006e19
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e19 	.word	0x08006e19
 8006e50:	08006e19 	.word	0x08006e19
 8006e54:	08006e19 	.word	0x08006e19
 8006e58:	08006e19 	.word	0x08006e19
 8006e5c:	08006f9b 	.word	0x08006f9b
 8006e60:	08006ec7 	.word	0x08006ec7
 8006e64:	08006f55 	.word	0x08006f55
 8006e68:	08006e19 	.word	0x08006e19
 8006e6c:	08006e19 	.word	0x08006e19
 8006e70:	08006fbd 	.word	0x08006fbd
 8006e74:	08006e19 	.word	0x08006e19
 8006e78:	08006ec7 	.word	0x08006ec7
 8006e7c:	08006e19 	.word	0x08006e19
 8006e80:	08006e19 	.word	0x08006e19
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6032      	str	r2, [r6, #0]
 8006e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e09c      	b.n	8006fd6 <_printf_i+0x1e6>
 8006e9c:	6833      	ldr	r3, [r6, #0]
 8006e9e:	6820      	ldr	r0, [r4, #0]
 8006ea0:	1d19      	adds	r1, r3, #4
 8006ea2:	6031      	str	r1, [r6, #0]
 8006ea4:	0606      	lsls	r6, r0, #24
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0xbc>
 8006ea8:	681d      	ldr	r5, [r3, #0]
 8006eaa:	e003      	b.n	8006eb4 <_printf_i+0xc4>
 8006eac:	0645      	lsls	r5, r0, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0xb8>
 8006eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eb4:	2d00      	cmp	r5, #0
 8006eb6:	da03      	bge.n	8006ec0 <_printf_i+0xd0>
 8006eb8:	232d      	movs	r3, #45	@ 0x2d
 8006eba:	426d      	negs	r5, r5
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec0:	4858      	ldr	r0, [pc, #352]	@ (8007024 <_printf_i+0x234>)
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	e011      	b.n	8006eea <_printf_i+0xfa>
 8006ec6:	6821      	ldr	r1, [r4, #0]
 8006ec8:	6833      	ldr	r3, [r6, #0]
 8006eca:	0608      	lsls	r0, r1, #24
 8006ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ed0:	d402      	bmi.n	8006ed8 <_printf_i+0xe8>
 8006ed2:	0649      	lsls	r1, r1, #25
 8006ed4:	bf48      	it	mi
 8006ed6:	b2ad      	uxthmi	r5, r5
 8006ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006eda:	4852      	ldr	r0, [pc, #328]	@ (8007024 <_printf_i+0x234>)
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	bf14      	ite	ne
 8006ee0:	230a      	movne	r3, #10
 8006ee2:	2308      	moveq	r3, #8
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eea:	6866      	ldr	r6, [r4, #4]
 8006eec:	60a6      	str	r6, [r4, #8]
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	db05      	blt.n	8006efe <_printf_i+0x10e>
 8006ef2:	6821      	ldr	r1, [r4, #0]
 8006ef4:	432e      	orrs	r6, r5
 8006ef6:	f021 0104 	bic.w	r1, r1, #4
 8006efa:	6021      	str	r1, [r4, #0]
 8006efc:	d04b      	beq.n	8006f96 <_printf_i+0x1a6>
 8006efe:	4616      	mov	r6, r2
 8006f00:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f04:	fb03 5711 	mls	r7, r3, r1, r5
 8006f08:	5dc7      	ldrb	r7, [r0, r7]
 8006f0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f0e:	462f      	mov	r7, r5
 8006f10:	42bb      	cmp	r3, r7
 8006f12:	460d      	mov	r5, r1
 8006f14:	d9f4      	bls.n	8006f00 <_printf_i+0x110>
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d10b      	bne.n	8006f32 <_printf_i+0x142>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	07df      	lsls	r7, r3, #31
 8006f1e:	d508      	bpl.n	8006f32 <_printf_i+0x142>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	6861      	ldr	r1, [r4, #4]
 8006f24:	4299      	cmp	r1, r3
 8006f26:	bfde      	ittt	le
 8006f28:	2330      	movle	r3, #48	@ 0x30
 8006f2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f32:	1b92      	subs	r2, r2, r6
 8006f34:	6122      	str	r2, [r4, #16]
 8006f36:	f8cd a000 	str.w	sl, [sp]
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	aa03      	add	r2, sp, #12
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4640      	mov	r0, r8
 8006f42:	f7ff fee7 	bl	8006d14 <_printf_common>
 8006f46:	3001      	adds	r0, #1
 8006f48:	d14a      	bne.n	8006fe0 <_printf_i+0x1f0>
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4e:	b004      	add	sp, #16
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f043 0320 	orr.w	r3, r3, #32
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	4832      	ldr	r0, [pc, #200]	@ (8007028 <_printf_i+0x238>)
 8006f5e:	2778      	movs	r7, #120	@ 0x78
 8006f60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	6831      	ldr	r1, [r6, #0]
 8006f68:	061f      	lsls	r7, r3, #24
 8006f6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f6e:	d402      	bmi.n	8006f76 <_printf_i+0x186>
 8006f70:	065f      	lsls	r7, r3, #25
 8006f72:	bf48      	it	mi
 8006f74:	b2ad      	uxthmi	r5, r5
 8006f76:	6031      	str	r1, [r6, #0]
 8006f78:	07d9      	lsls	r1, r3, #31
 8006f7a:	bf44      	itt	mi
 8006f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f80:	6023      	strmi	r3, [r4, #0]
 8006f82:	b11d      	cbz	r5, 8006f8c <_printf_i+0x19c>
 8006f84:	2310      	movs	r3, #16
 8006f86:	e7ad      	b.n	8006ee4 <_printf_i+0xf4>
 8006f88:	4826      	ldr	r0, [pc, #152]	@ (8007024 <_printf_i+0x234>)
 8006f8a:	e7e9      	b.n	8006f60 <_printf_i+0x170>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	f023 0320 	bic.w	r3, r3, #32
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	e7f6      	b.n	8006f84 <_printf_i+0x194>
 8006f96:	4616      	mov	r6, r2
 8006f98:	e7bd      	b.n	8006f16 <_printf_i+0x126>
 8006f9a:	6833      	ldr	r3, [r6, #0]
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	6961      	ldr	r1, [r4, #20]
 8006fa0:	1d18      	adds	r0, r3, #4
 8006fa2:	6030      	str	r0, [r6, #0]
 8006fa4:	062e      	lsls	r6, r5, #24
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	d501      	bpl.n	8006fae <_printf_i+0x1be>
 8006faa:	6019      	str	r1, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <_printf_i+0x1c4>
 8006fae:	0668      	lsls	r0, r5, #25
 8006fb0:	d5fb      	bpl.n	8006faa <_printf_i+0x1ba>
 8006fb2:	8019      	strh	r1, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	4616      	mov	r6, r2
 8006fba:	e7bc      	b.n	8006f36 <_printf_i+0x146>
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	6032      	str	r2, [r6, #0]
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7f9 f921 	bl	8000210 <memchr>
 8006fce:	b108      	cbz	r0, 8006fd4 <_printf_i+0x1e4>
 8006fd0:	1b80      	subs	r0, r0, r6
 8006fd2:	6060      	str	r0, [r4, #4]
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fde:	e7aa      	b.n	8006f36 <_printf_i+0x146>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	47d0      	blx	sl
 8006fea:	3001      	adds	r0, #1
 8006fec:	d0ad      	beq.n	8006f4a <_printf_i+0x15a>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	079b      	lsls	r3, r3, #30
 8006ff2:	d413      	bmi.n	800701c <_printf_i+0x22c>
 8006ff4:	68e0      	ldr	r0, [r4, #12]
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	4298      	cmp	r0, r3
 8006ffa:	bfb8      	it	lt
 8006ffc:	4618      	movlt	r0, r3
 8006ffe:	e7a6      	b.n	8006f4e <_printf_i+0x15e>
 8007000:	2301      	movs	r3, #1
 8007002:	4632      	mov	r2, r6
 8007004:	4649      	mov	r1, r9
 8007006:	4640      	mov	r0, r8
 8007008:	47d0      	blx	sl
 800700a:	3001      	adds	r0, #1
 800700c:	d09d      	beq.n	8006f4a <_printf_i+0x15a>
 800700e:	3501      	adds	r5, #1
 8007010:	68e3      	ldr	r3, [r4, #12]
 8007012:	9903      	ldr	r1, [sp, #12]
 8007014:	1a5b      	subs	r3, r3, r1
 8007016:	42ab      	cmp	r3, r5
 8007018:	dcf2      	bgt.n	8007000 <_printf_i+0x210>
 800701a:	e7eb      	b.n	8006ff4 <_printf_i+0x204>
 800701c:	2500      	movs	r5, #0
 800701e:	f104 0619 	add.w	r6, r4, #25
 8007022:	e7f5      	b.n	8007010 <_printf_i+0x220>
 8007024:	08007a89 	.word	0x08007a89
 8007028:	08007a9a 	.word	0x08007a9a

0800702c <_scanf_chars>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	4615      	mov	r5, r2
 8007032:	688a      	ldr	r2, [r1, #8]
 8007034:	4680      	mov	r8, r0
 8007036:	460c      	mov	r4, r1
 8007038:	b932      	cbnz	r2, 8007048 <_scanf_chars+0x1c>
 800703a:	698a      	ldr	r2, [r1, #24]
 800703c:	2a00      	cmp	r2, #0
 800703e:	bf14      	ite	ne
 8007040:	f04f 32ff 	movne.w	r2, #4294967295
 8007044:	2201      	moveq	r2, #1
 8007046:	608a      	str	r2, [r1, #8]
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80070dc <_scanf_chars+0xb0>
 800704e:	06d1      	lsls	r1, r2, #27
 8007050:	bf5f      	itttt	pl
 8007052:	681a      	ldrpl	r2, [r3, #0]
 8007054:	1d11      	addpl	r1, r2, #4
 8007056:	6019      	strpl	r1, [r3, #0]
 8007058:	6816      	ldrpl	r6, [r2, #0]
 800705a:	2700      	movs	r7, #0
 800705c:	69a0      	ldr	r0, [r4, #24]
 800705e:	b188      	cbz	r0, 8007084 <_scanf_chars+0x58>
 8007060:	2801      	cmp	r0, #1
 8007062:	d107      	bne.n	8007074 <_scanf_chars+0x48>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	6963      	ldr	r3, [r4, #20]
 800706a:	5c9b      	ldrb	r3, [r3, r2]
 800706c:	b953      	cbnz	r3, 8007084 <_scanf_chars+0x58>
 800706e:	2f00      	cmp	r7, #0
 8007070:	d031      	beq.n	80070d6 <_scanf_chars+0xaa>
 8007072:	e022      	b.n	80070ba <_scanf_chars+0x8e>
 8007074:	2802      	cmp	r0, #2
 8007076:	d120      	bne.n	80070ba <_scanf_chars+0x8e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007080:	071b      	lsls	r3, r3, #28
 8007082:	d41a      	bmi.n	80070ba <_scanf_chars+0x8e>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	06da      	lsls	r2, r3, #27
 8007088:	bf5e      	ittt	pl
 800708a:	682b      	ldrpl	r3, [r5, #0]
 800708c:	781b      	ldrbpl	r3, [r3, #0]
 800708e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007092:	682a      	ldr	r2, [r5, #0]
 8007094:	686b      	ldr	r3, [r5, #4]
 8007096:	3201      	adds	r2, #1
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	68a2      	ldr	r2, [r4, #8]
 800709c:	3b01      	subs	r3, #1
 800709e:	3a01      	subs	r2, #1
 80070a0:	606b      	str	r3, [r5, #4]
 80070a2:	3701      	adds	r7, #1
 80070a4:	60a2      	str	r2, [r4, #8]
 80070a6:	b142      	cbz	r2, 80070ba <_scanf_chars+0x8e>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dcd7      	bgt.n	800705c <_scanf_chars+0x30>
 80070ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80070b0:	4629      	mov	r1, r5
 80070b2:	4640      	mov	r0, r8
 80070b4:	4798      	blx	r3
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d0d0      	beq.n	800705c <_scanf_chars+0x30>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f013 0310 	ands.w	r3, r3, #16
 80070c0:	d105      	bne.n	80070ce <_scanf_chars+0xa2>
 80070c2:	68e2      	ldr	r2, [r4, #12]
 80070c4:	3201      	adds	r2, #1
 80070c6:	60e2      	str	r2, [r4, #12]
 80070c8:	69a2      	ldr	r2, [r4, #24]
 80070ca:	b102      	cbz	r2, 80070ce <_scanf_chars+0xa2>
 80070cc:	7033      	strb	r3, [r6, #0]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	443b      	add	r3, r7
 80070d2:	6123      	str	r3, [r4, #16]
 80070d4:	2000      	movs	r0, #0
 80070d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070da:	bf00      	nop
 80070dc:	08007ac7 	.word	0x08007ac7

080070e0 <_scanf_i>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	4698      	mov	r8, r3
 80070e6:	4b74      	ldr	r3, [pc, #464]	@ (80072b8 <_scanf_i+0x1d8>)
 80070e8:	460c      	mov	r4, r1
 80070ea:	4682      	mov	sl, r0
 80070ec:	4616      	mov	r6, r2
 80070ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070f2:	b087      	sub	sp, #28
 80070f4:	ab03      	add	r3, sp, #12
 80070f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80070fa:	4b70      	ldr	r3, [pc, #448]	@ (80072bc <_scanf_i+0x1dc>)
 80070fc:	69a1      	ldr	r1, [r4, #24]
 80070fe:	4a70      	ldr	r2, [pc, #448]	@ (80072c0 <_scanf_i+0x1e0>)
 8007100:	2903      	cmp	r1, #3
 8007102:	bf08      	it	eq
 8007104:	461a      	moveq	r2, r3
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	9201      	str	r2, [sp, #4]
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007110:	bf88      	it	hi
 8007112:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007116:	4627      	mov	r7, r4
 8007118:	bf82      	ittt	hi
 800711a:	eb03 0905 	addhi.w	r9, r3, r5
 800711e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007122:	60a3      	strhi	r3, [r4, #8]
 8007124:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007128:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800712c:	bf98      	it	ls
 800712e:	f04f 0900 	movls.w	r9, #0
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	463d      	mov	r5, r7
 8007136:	f04f 0b00 	mov.w	fp, #0
 800713a:	6831      	ldr	r1, [r6, #0]
 800713c:	ab03      	add	r3, sp, #12
 800713e:	7809      	ldrb	r1, [r1, #0]
 8007140:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007144:	2202      	movs	r2, #2
 8007146:	f7f9 f863 	bl	8000210 <memchr>
 800714a:	b328      	cbz	r0, 8007198 <_scanf_i+0xb8>
 800714c:	f1bb 0f01 	cmp.w	fp, #1
 8007150:	d159      	bne.n	8007206 <_scanf_i+0x126>
 8007152:	6862      	ldr	r2, [r4, #4]
 8007154:	b92a      	cbnz	r2, 8007162 <_scanf_i+0x82>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	2108      	movs	r1, #8
 800715a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800715e:	6061      	str	r1, [r4, #4]
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007168:	6022      	str	r2, [r4, #0]
 800716a:	68a2      	ldr	r2, [r4, #8]
 800716c:	1e51      	subs	r1, r2, #1
 800716e:	60a1      	str	r1, [r4, #8]
 8007170:	b192      	cbz	r2, 8007198 <_scanf_i+0xb8>
 8007172:	6832      	ldr	r2, [r6, #0]
 8007174:	1c51      	adds	r1, r2, #1
 8007176:	6031      	str	r1, [r6, #0]
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	f805 2b01 	strb.w	r2, [r5], #1
 800717e:	6872      	ldr	r2, [r6, #4]
 8007180:	3a01      	subs	r2, #1
 8007182:	2a00      	cmp	r2, #0
 8007184:	6072      	str	r2, [r6, #4]
 8007186:	dc07      	bgt.n	8007198 <_scanf_i+0xb8>
 8007188:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800718c:	4631      	mov	r1, r6
 800718e:	4650      	mov	r0, sl
 8007190:	4790      	blx	r2
 8007192:	2800      	cmp	r0, #0
 8007194:	f040 8085 	bne.w	80072a2 <_scanf_i+0x1c2>
 8007198:	f10b 0b01 	add.w	fp, fp, #1
 800719c:	f1bb 0f03 	cmp.w	fp, #3
 80071a0:	d1cb      	bne.n	800713a <_scanf_i+0x5a>
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	b90b      	cbnz	r3, 80071aa <_scanf_i+0xca>
 80071a6:	230a      	movs	r3, #10
 80071a8:	6063      	str	r3, [r4, #4]
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	4945      	ldr	r1, [pc, #276]	@ (80072c4 <_scanf_i+0x1e4>)
 80071ae:	6960      	ldr	r0, [r4, #20]
 80071b0:	1ac9      	subs	r1, r1, r3
 80071b2:	f000 f997 	bl	80074e4 <__sccl>
 80071b6:	f04f 0b00 	mov.w	fp, #0
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03d      	beq.n	800723e <_scanf_i+0x15e>
 80071c2:	6831      	ldr	r1, [r6, #0]
 80071c4:	6960      	ldr	r0, [r4, #20]
 80071c6:	f891 c000 	ldrb.w	ip, [r1]
 80071ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d035      	beq.n	800723e <_scanf_i+0x15e>
 80071d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80071d6:	d124      	bne.n	8007222 <_scanf_i+0x142>
 80071d8:	0510      	lsls	r0, r2, #20
 80071da:	d522      	bpl.n	8007222 <_scanf_i+0x142>
 80071dc:	f10b 0b01 	add.w	fp, fp, #1
 80071e0:	f1b9 0f00 	cmp.w	r9, #0
 80071e4:	d003      	beq.n	80071ee <_scanf_i+0x10e>
 80071e6:	3301      	adds	r3, #1
 80071e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80071ec:	60a3      	str	r3, [r4, #8]
 80071ee:	6873      	ldr	r3, [r6, #4]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	6073      	str	r3, [r6, #4]
 80071f6:	dd1b      	ble.n	8007230 <_scanf_i+0x150>
 80071f8:	6833      	ldr	r3, [r6, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	6033      	str	r3, [r6, #0]
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	3b01      	subs	r3, #1
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	e7d9      	b.n	80071ba <_scanf_i+0xda>
 8007206:	f1bb 0f02 	cmp.w	fp, #2
 800720a:	d1ae      	bne.n	800716a <_scanf_i+0x8a>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007212:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007216:	d1c4      	bne.n	80071a2 <_scanf_i+0xc2>
 8007218:	2110      	movs	r1, #16
 800721a:	6061      	str	r1, [r4, #4]
 800721c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007220:	e7a2      	b.n	8007168 <_scanf_i+0x88>
 8007222:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	780b      	ldrb	r3, [r1, #0]
 800722a:	f805 3b01 	strb.w	r3, [r5], #1
 800722e:	e7de      	b.n	80071ee <_scanf_i+0x10e>
 8007230:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007234:	4631      	mov	r1, r6
 8007236:	4650      	mov	r0, sl
 8007238:	4798      	blx	r3
 800723a:	2800      	cmp	r0, #0
 800723c:	d0df      	beq.n	80071fe <_scanf_i+0x11e>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	05d9      	lsls	r1, r3, #23
 8007242:	d50d      	bpl.n	8007260 <_scanf_i+0x180>
 8007244:	42bd      	cmp	r5, r7
 8007246:	d909      	bls.n	800725c <_scanf_i+0x17c>
 8007248:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800724c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007250:	4632      	mov	r2, r6
 8007252:	4650      	mov	r0, sl
 8007254:	4798      	blx	r3
 8007256:	f105 39ff 	add.w	r9, r5, #4294967295
 800725a:	464d      	mov	r5, r9
 800725c:	42bd      	cmp	r5, r7
 800725e:	d028      	beq.n	80072b2 <_scanf_i+0x1d2>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	f012 0210 	ands.w	r2, r2, #16
 8007266:	d113      	bne.n	8007290 <_scanf_i+0x1b0>
 8007268:	702a      	strb	r2, [r5, #0]
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	9e01      	ldr	r6, [sp, #4]
 800726e:	4639      	mov	r1, r7
 8007270:	4650      	mov	r0, sl
 8007272:	47b0      	blx	r6
 8007274:	f8d8 3000 	ldr.w	r3, [r8]
 8007278:	6821      	ldr	r1, [r4, #0]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	f8c8 2000 	str.w	r2, [r8]
 8007280:	f011 0f20 	tst.w	r1, #32
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	d00f      	beq.n	80072a8 <_scanf_i+0x1c8>
 8007288:	6018      	str	r0, [r3, #0]
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60e3      	str	r3, [r4, #12]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	1bed      	subs	r5, r5, r7
 8007294:	445d      	add	r5, fp
 8007296:	442b      	add	r3, r5
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	2000      	movs	r0, #0
 800729c:	b007      	add	sp, #28
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	f04f 0b00 	mov.w	fp, #0
 80072a6:	e7ca      	b.n	800723e <_scanf_i+0x15e>
 80072a8:	07ca      	lsls	r2, r1, #31
 80072aa:	bf4c      	ite	mi
 80072ac:	8018      	strhmi	r0, [r3, #0]
 80072ae:	6018      	strpl	r0, [r3, #0]
 80072b0:	e7eb      	b.n	800728a <_scanf_i+0x1aa>
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7f2      	b.n	800729c <_scanf_i+0x1bc>
 80072b6:	bf00      	nop
 80072b8:	08007a4c 	.word	0x08007a4c
 80072bc:	080077d1 	.word	0x080077d1
 80072c0:	080078b1 	.word	0x080078b1
 80072c4:	08007abb 	.word	0x08007abb

080072c8 <__sflush_r>:
 80072c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	0716      	lsls	r6, r2, #28
 80072d2:	4605      	mov	r5, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	d454      	bmi.n	8007382 <__sflush_r+0xba>
 80072d8:	684b      	ldr	r3, [r1, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dc02      	bgt.n	80072e4 <__sflush_r+0x1c>
 80072de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dd48      	ble.n	8007376 <__sflush_r+0xae>
 80072e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	d045      	beq.n	8007376 <__sflush_r+0xae>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072f0:	682f      	ldr	r7, [r5, #0]
 80072f2:	6a21      	ldr	r1, [r4, #32]
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	d030      	beq.n	800735a <__sflush_r+0x92>
 80072f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	0759      	lsls	r1, r3, #29
 80072fe:	d505      	bpl.n	800730c <__sflush_r+0x44>
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007306:	b10b      	cbz	r3, 800730c <__sflush_r+0x44>
 8007308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007310:	6a21      	ldr	r1, [r4, #32]
 8007312:	4628      	mov	r0, r5
 8007314:	47b0      	blx	r6
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	d106      	bne.n	800732a <__sflush_r+0x62>
 800731c:	6829      	ldr	r1, [r5, #0]
 800731e:	291d      	cmp	r1, #29
 8007320:	d82b      	bhi.n	800737a <__sflush_r+0xb2>
 8007322:	4a2a      	ldr	r2, [pc, #168]	@ (80073cc <__sflush_r+0x104>)
 8007324:	40ca      	lsrs	r2, r1
 8007326:	07d6      	lsls	r6, r2, #31
 8007328:	d527      	bpl.n	800737a <__sflush_r+0xb2>
 800732a:	2200      	movs	r2, #0
 800732c:	6062      	str	r2, [r4, #4]
 800732e:	04d9      	lsls	r1, r3, #19
 8007330:	6922      	ldr	r2, [r4, #16]
 8007332:	6022      	str	r2, [r4, #0]
 8007334:	d504      	bpl.n	8007340 <__sflush_r+0x78>
 8007336:	1c42      	adds	r2, r0, #1
 8007338:	d101      	bne.n	800733e <__sflush_r+0x76>
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	b903      	cbnz	r3, 8007340 <__sflush_r+0x78>
 800733e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007342:	602f      	str	r7, [r5, #0]
 8007344:	b1b9      	cbz	r1, 8007376 <__sflush_r+0xae>
 8007346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800734a:	4299      	cmp	r1, r3
 800734c:	d002      	beq.n	8007354 <__sflush_r+0x8c>
 800734e:	4628      	mov	r0, r5
 8007350:	f7fe ff7e 	bl	8006250 <_free_r>
 8007354:	2300      	movs	r3, #0
 8007356:	6363      	str	r3, [r4, #52]	@ 0x34
 8007358:	e00d      	b.n	8007376 <__sflush_r+0xae>
 800735a:	2301      	movs	r3, #1
 800735c:	4628      	mov	r0, r5
 800735e:	47b0      	blx	r6
 8007360:	4602      	mov	r2, r0
 8007362:	1c50      	adds	r0, r2, #1
 8007364:	d1c9      	bne.n	80072fa <__sflush_r+0x32>
 8007366:	682b      	ldr	r3, [r5, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0c6      	beq.n	80072fa <__sflush_r+0x32>
 800736c:	2b1d      	cmp	r3, #29
 800736e:	d001      	beq.n	8007374 <__sflush_r+0xac>
 8007370:	2b16      	cmp	r3, #22
 8007372:	d11e      	bne.n	80073b2 <__sflush_r+0xea>
 8007374:	602f      	str	r7, [r5, #0]
 8007376:	2000      	movs	r0, #0
 8007378:	e022      	b.n	80073c0 <__sflush_r+0xf8>
 800737a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800737e:	b21b      	sxth	r3, r3
 8007380:	e01b      	b.n	80073ba <__sflush_r+0xf2>
 8007382:	690f      	ldr	r7, [r1, #16]
 8007384:	2f00      	cmp	r7, #0
 8007386:	d0f6      	beq.n	8007376 <__sflush_r+0xae>
 8007388:	0793      	lsls	r3, r2, #30
 800738a:	680e      	ldr	r6, [r1, #0]
 800738c:	bf08      	it	eq
 800738e:	694b      	ldreq	r3, [r1, #20]
 8007390:	600f      	str	r7, [r1, #0]
 8007392:	bf18      	it	ne
 8007394:	2300      	movne	r3, #0
 8007396:	eba6 0807 	sub.w	r8, r6, r7
 800739a:	608b      	str	r3, [r1, #8]
 800739c:	f1b8 0f00 	cmp.w	r8, #0
 80073a0:	dde9      	ble.n	8007376 <__sflush_r+0xae>
 80073a2:	6a21      	ldr	r1, [r4, #32]
 80073a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073a6:	4643      	mov	r3, r8
 80073a8:	463a      	mov	r2, r7
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b0      	blx	r6
 80073ae:	2800      	cmp	r0, #0
 80073b0:	dc08      	bgt.n	80073c4 <__sflush_r+0xfc>
 80073b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c4:	4407      	add	r7, r0
 80073c6:	eba8 0800 	sub.w	r8, r8, r0
 80073ca:	e7e7      	b.n	800739c <__sflush_r+0xd4>
 80073cc:	20400001 	.word	0x20400001

080073d0 <_fflush_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	690b      	ldr	r3, [r1, #16]
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	b913      	cbnz	r3, 80073e0 <_fflush_r+0x10>
 80073da:	2500      	movs	r5, #0
 80073dc:	4628      	mov	r0, r5
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	b118      	cbz	r0, 80073ea <_fflush_r+0x1a>
 80073e2:	6a03      	ldr	r3, [r0, #32]
 80073e4:	b90b      	cbnz	r3, 80073ea <_fflush_r+0x1a>
 80073e6:	f7fe fce9 	bl	8005dbc <__sinit>
 80073ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f3      	beq.n	80073da <_fflush_r+0xa>
 80073f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073f4:	07d0      	lsls	r0, r2, #31
 80073f6:	d404      	bmi.n	8007402 <_fflush_r+0x32>
 80073f8:	0599      	lsls	r1, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_fflush_r+0x32>
 80073fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073fe:	f7fe ff24 	bl	800624a <__retarget_lock_acquire_recursive>
 8007402:	4628      	mov	r0, r5
 8007404:	4621      	mov	r1, r4
 8007406:	f7ff ff5f 	bl	80072c8 <__sflush_r>
 800740a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800740c:	07da      	lsls	r2, r3, #31
 800740e:	4605      	mov	r5, r0
 8007410:	d4e4      	bmi.n	80073dc <_fflush_r+0xc>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	059b      	lsls	r3, r3, #22
 8007416:	d4e1      	bmi.n	80073dc <_fflush_r+0xc>
 8007418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741a:	f7fe ff17 	bl	800624c <__retarget_lock_release_recursive>
 800741e:	e7dd      	b.n	80073dc <_fflush_r+0xc>

08007420 <__swhatbuf_r>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007428:	2900      	cmp	r1, #0
 800742a:	b096      	sub	sp, #88	@ 0x58
 800742c:	4615      	mov	r5, r2
 800742e:	461e      	mov	r6, r3
 8007430:	da0d      	bge.n	800744e <__swhatbuf_r+0x2e>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	bf14      	ite	ne
 800743e:	2340      	movne	r3, #64	@ 0x40
 8007440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007444:	2000      	movs	r0, #0
 8007446:	6031      	str	r1, [r6, #0]
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	b016      	add	sp, #88	@ 0x58
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	466a      	mov	r2, sp
 8007450:	f000 f8d6 	bl	8007600 <_fstat_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	dbec      	blt.n	8007432 <__swhatbuf_r+0x12>
 8007458:	9901      	ldr	r1, [sp, #4]
 800745a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800745e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007462:	4259      	negs	r1, r3
 8007464:	4159      	adcs	r1, r3
 8007466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800746a:	e7eb      	b.n	8007444 <__swhatbuf_r+0x24>

0800746c <__smakebuf_r>:
 800746c:	898b      	ldrh	r3, [r1, #12]
 800746e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007470:	079d      	lsls	r5, r3, #30
 8007472:	4606      	mov	r6, r0
 8007474:	460c      	mov	r4, r1
 8007476:	d507      	bpl.n	8007488 <__smakebuf_r+0x1c>
 8007478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	6123      	str	r3, [r4, #16]
 8007480:	2301      	movs	r3, #1
 8007482:	6163      	str	r3, [r4, #20]
 8007484:	b003      	add	sp, #12
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007488:	ab01      	add	r3, sp, #4
 800748a:	466a      	mov	r2, sp
 800748c:	f7ff ffc8 	bl	8007420 <__swhatbuf_r>
 8007490:	9f00      	ldr	r7, [sp, #0]
 8007492:	4605      	mov	r5, r0
 8007494:	4639      	mov	r1, r7
 8007496:	4630      	mov	r0, r6
 8007498:	f7fe ff46 	bl	8006328 <_malloc_r>
 800749c:	b948      	cbnz	r0, 80074b2 <__smakebuf_r+0x46>
 800749e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a2:	059a      	lsls	r2, r3, #22
 80074a4:	d4ee      	bmi.n	8007484 <__smakebuf_r+0x18>
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	f043 0302 	orr.w	r3, r3, #2
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	e7e2      	b.n	8007478 <__smakebuf_r+0xc>
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	6020      	str	r0, [r4, #0]
 80074b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074c2:	b15b      	cbz	r3, 80074dc <__smakebuf_r+0x70>
 80074c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f8ab 	bl	8007624 <_isatty_r>
 80074ce:	b128      	cbz	r0, 80074dc <__smakebuf_r+0x70>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	431d      	orrs	r5, r3
 80074e0:	81a5      	strh	r5, [r4, #12]
 80074e2:	e7cf      	b.n	8007484 <__smakebuf_r+0x18>

080074e4 <__sccl>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	780b      	ldrb	r3, [r1, #0]
 80074e8:	4604      	mov	r4, r0
 80074ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80074ec:	bf0b      	itete	eq
 80074ee:	784b      	ldrbeq	r3, [r1, #1]
 80074f0:	1c4a      	addne	r2, r1, #1
 80074f2:	1c8a      	addeq	r2, r1, #2
 80074f4:	2100      	movne	r1, #0
 80074f6:	bf08      	it	eq
 80074f8:	2101      	moveq	r1, #1
 80074fa:	3801      	subs	r0, #1
 80074fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007500:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007504:	42a8      	cmp	r0, r5
 8007506:	d1fb      	bne.n	8007500 <__sccl+0x1c>
 8007508:	b90b      	cbnz	r3, 800750e <__sccl+0x2a>
 800750a:	1e50      	subs	r0, r2, #1
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	f081 0101 	eor.w	r1, r1, #1
 8007512:	54e1      	strb	r1, [r4, r3]
 8007514:	4610      	mov	r0, r2
 8007516:	4602      	mov	r2, r0
 8007518:	f812 5b01 	ldrb.w	r5, [r2], #1
 800751c:	2d2d      	cmp	r5, #45	@ 0x2d
 800751e:	d005      	beq.n	800752c <__sccl+0x48>
 8007520:	2d5d      	cmp	r5, #93	@ 0x5d
 8007522:	d016      	beq.n	8007552 <__sccl+0x6e>
 8007524:	2d00      	cmp	r5, #0
 8007526:	d0f1      	beq.n	800750c <__sccl+0x28>
 8007528:	462b      	mov	r3, r5
 800752a:	e7f2      	b.n	8007512 <__sccl+0x2e>
 800752c:	7846      	ldrb	r6, [r0, #1]
 800752e:	2e5d      	cmp	r6, #93	@ 0x5d
 8007530:	d0fa      	beq.n	8007528 <__sccl+0x44>
 8007532:	42b3      	cmp	r3, r6
 8007534:	dcf8      	bgt.n	8007528 <__sccl+0x44>
 8007536:	3002      	adds	r0, #2
 8007538:	461a      	mov	r2, r3
 800753a:	3201      	adds	r2, #1
 800753c:	4296      	cmp	r6, r2
 800753e:	54a1      	strb	r1, [r4, r2]
 8007540:	dcfb      	bgt.n	800753a <__sccl+0x56>
 8007542:	1af2      	subs	r2, r6, r3
 8007544:	3a01      	subs	r2, #1
 8007546:	1c5d      	adds	r5, r3, #1
 8007548:	42b3      	cmp	r3, r6
 800754a:	bfa8      	it	ge
 800754c:	2200      	movge	r2, #0
 800754e:	18ab      	adds	r3, r5, r2
 8007550:	e7e1      	b.n	8007516 <__sccl+0x32>
 8007552:	4610      	mov	r0, r2
 8007554:	e7da      	b.n	800750c <__sccl+0x28>

08007556 <__submore>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	460c      	mov	r4, r1
 800755c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800755e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007562:	4299      	cmp	r1, r3
 8007564:	d11d      	bne.n	80075a2 <__submore+0x4c>
 8007566:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800756a:	f7fe fedd 	bl	8006328 <_malloc_r>
 800756e:	b918      	cbnz	r0, 8007578 <__submore+0x22>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800757c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800757e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007582:	6360      	str	r0, [r4, #52]	@ 0x34
 8007584:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007588:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800758c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007590:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007594:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007598:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800759c:	6020      	str	r0, [r4, #0]
 800759e:	2000      	movs	r0, #0
 80075a0:	e7e8      	b.n	8007574 <__submore+0x1e>
 80075a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80075a4:	0077      	lsls	r7, r6, #1
 80075a6:	463a      	mov	r2, r7
 80075a8:	f000 f86a 	bl	8007680 <_realloc_r>
 80075ac:	4605      	mov	r5, r0
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0de      	beq.n	8007570 <__submore+0x1a>
 80075b2:	eb00 0806 	add.w	r8, r0, r6
 80075b6:	4601      	mov	r1, r0
 80075b8:	4632      	mov	r2, r6
 80075ba:	4640      	mov	r0, r8
 80075bc:	f000 f852 	bl	8007664 <memcpy>
 80075c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80075c4:	f8c4 8000 	str.w	r8, [r4]
 80075c8:	e7e9      	b.n	800759e <__submore+0x48>

080075ca <memmove>:
 80075ca:	4288      	cmp	r0, r1
 80075cc:	b510      	push	{r4, lr}
 80075ce:	eb01 0402 	add.w	r4, r1, r2
 80075d2:	d902      	bls.n	80075da <memmove+0x10>
 80075d4:	4284      	cmp	r4, r0
 80075d6:	4623      	mov	r3, r4
 80075d8:	d807      	bhi.n	80075ea <memmove+0x20>
 80075da:	1e43      	subs	r3, r0, #1
 80075dc:	42a1      	cmp	r1, r4
 80075de:	d008      	beq.n	80075f2 <memmove+0x28>
 80075e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075e8:	e7f8      	b.n	80075dc <memmove+0x12>
 80075ea:	4402      	add	r2, r0
 80075ec:	4601      	mov	r1, r0
 80075ee:	428a      	cmp	r2, r1
 80075f0:	d100      	bne.n	80075f4 <memmove+0x2a>
 80075f2:	bd10      	pop	{r4, pc}
 80075f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075fc:	e7f7      	b.n	80075ee <memmove+0x24>
	...

08007600 <_fstat_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d07      	ldr	r5, [pc, #28]	@ (8007620 <_fstat_r+0x20>)
 8007604:	2300      	movs	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	f7fa f8d8 	bl	80017c2 <_fstat>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d102      	bne.n	800761c <_fstat_r+0x1c>
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	b103      	cbz	r3, 800761c <_fstat_r+0x1c>
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	20000514 	.word	0x20000514

08007624 <_isatty_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d06      	ldr	r5, [pc, #24]	@ (8007640 <_isatty_r+0x1c>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	f7fa f8d7 	bl	80017e2 <_isatty>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_isatty_r+0x1a>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_isatty_r+0x1a>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000514 	.word	0x20000514

08007644 <_sbrk_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	@ (8007660 <_sbrk_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7fa f8e0 	bl	8001814 <_sbrk>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_sbrk_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_sbrk_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000514 	.word	0x20000514

08007664 <memcpy>:
 8007664:	440a      	add	r2, r1
 8007666:	4291      	cmp	r1, r2
 8007668:	f100 33ff 	add.w	r3, r0, #4294967295
 800766c:	d100      	bne.n	8007670 <memcpy+0xc>
 800766e:	4770      	bx	lr
 8007670:	b510      	push	{r4, lr}
 8007672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800767a:	4291      	cmp	r1, r2
 800767c:	d1f9      	bne.n	8007672 <memcpy+0xe>
 800767e:	bd10      	pop	{r4, pc}

08007680 <_realloc_r>:
 8007680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007684:	4607      	mov	r7, r0
 8007686:	4614      	mov	r4, r2
 8007688:	460d      	mov	r5, r1
 800768a:	b921      	cbnz	r1, 8007696 <_realloc_r+0x16>
 800768c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	4611      	mov	r1, r2
 8007692:	f7fe be49 	b.w	8006328 <_malloc_r>
 8007696:	b92a      	cbnz	r2, 80076a4 <_realloc_r+0x24>
 8007698:	f7fe fdda 	bl	8006250 <_free_r>
 800769c:	4625      	mov	r5, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	f000 f906 	bl	80078b4 <_malloc_usable_size_r>
 80076a8:	4284      	cmp	r4, r0
 80076aa:	4606      	mov	r6, r0
 80076ac:	d802      	bhi.n	80076b4 <_realloc_r+0x34>
 80076ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076b2:	d8f4      	bhi.n	800769e <_realloc_r+0x1e>
 80076b4:	4621      	mov	r1, r4
 80076b6:	4638      	mov	r0, r7
 80076b8:	f7fe fe36 	bl	8006328 <_malloc_r>
 80076bc:	4680      	mov	r8, r0
 80076be:	b908      	cbnz	r0, 80076c4 <_realloc_r+0x44>
 80076c0:	4645      	mov	r5, r8
 80076c2:	e7ec      	b.n	800769e <_realloc_r+0x1e>
 80076c4:	42b4      	cmp	r4, r6
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	bf28      	it	cs
 80076cc:	4632      	movcs	r2, r6
 80076ce:	f7ff ffc9 	bl	8007664 <memcpy>
 80076d2:	4629      	mov	r1, r5
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7fe fdbb 	bl	8006250 <_free_r>
 80076da:	e7f1      	b.n	80076c0 <_realloc_r+0x40>

080076dc <_strtol_l.isra.0>:
 80076dc:	2b24      	cmp	r3, #36	@ 0x24
 80076de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e2:	4686      	mov	lr, r0
 80076e4:	4690      	mov	r8, r2
 80076e6:	d801      	bhi.n	80076ec <_strtol_l.isra.0+0x10>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d106      	bne.n	80076fa <_strtol_l.isra.0+0x1e>
 80076ec:	f7fe fd82 	bl	80061f4 <__errno>
 80076f0:	2316      	movs	r3, #22
 80076f2:	6003      	str	r3, [r0, #0]
 80076f4:	2000      	movs	r0, #0
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	4834      	ldr	r0, [pc, #208]	@ (80077cc <_strtol_l.isra.0+0xf0>)
 80076fc:	460d      	mov	r5, r1
 80076fe:	462a      	mov	r2, r5
 8007700:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007704:	5d06      	ldrb	r6, [r0, r4]
 8007706:	f016 0608 	ands.w	r6, r6, #8
 800770a:	d1f8      	bne.n	80076fe <_strtol_l.isra.0+0x22>
 800770c:	2c2d      	cmp	r4, #45	@ 0x2d
 800770e:	d110      	bne.n	8007732 <_strtol_l.isra.0+0x56>
 8007710:	782c      	ldrb	r4, [r5, #0]
 8007712:	2601      	movs	r6, #1
 8007714:	1c95      	adds	r5, r2, #2
 8007716:	f033 0210 	bics.w	r2, r3, #16
 800771a:	d115      	bne.n	8007748 <_strtol_l.isra.0+0x6c>
 800771c:	2c30      	cmp	r4, #48	@ 0x30
 800771e:	d10d      	bne.n	800773c <_strtol_l.isra.0+0x60>
 8007720:	782a      	ldrb	r2, [r5, #0]
 8007722:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007726:	2a58      	cmp	r2, #88	@ 0x58
 8007728:	d108      	bne.n	800773c <_strtol_l.isra.0+0x60>
 800772a:	786c      	ldrb	r4, [r5, #1]
 800772c:	3502      	adds	r5, #2
 800772e:	2310      	movs	r3, #16
 8007730:	e00a      	b.n	8007748 <_strtol_l.isra.0+0x6c>
 8007732:	2c2b      	cmp	r4, #43	@ 0x2b
 8007734:	bf04      	itt	eq
 8007736:	782c      	ldrbeq	r4, [r5, #0]
 8007738:	1c95      	addeq	r5, r2, #2
 800773a:	e7ec      	b.n	8007716 <_strtol_l.isra.0+0x3a>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f6      	bne.n	800772e <_strtol_l.isra.0+0x52>
 8007740:	2c30      	cmp	r4, #48	@ 0x30
 8007742:	bf14      	ite	ne
 8007744:	230a      	movne	r3, #10
 8007746:	2308      	moveq	r3, #8
 8007748:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800774c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007750:	2200      	movs	r2, #0
 8007752:	fbbc f9f3 	udiv	r9, ip, r3
 8007756:	4610      	mov	r0, r2
 8007758:	fb03 ca19 	mls	sl, r3, r9, ip
 800775c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007760:	2f09      	cmp	r7, #9
 8007762:	d80f      	bhi.n	8007784 <_strtol_l.isra.0+0xa8>
 8007764:	463c      	mov	r4, r7
 8007766:	42a3      	cmp	r3, r4
 8007768:	dd1b      	ble.n	80077a2 <_strtol_l.isra.0+0xc6>
 800776a:	1c57      	adds	r7, r2, #1
 800776c:	d007      	beq.n	800777e <_strtol_l.isra.0+0xa2>
 800776e:	4581      	cmp	r9, r0
 8007770:	d314      	bcc.n	800779c <_strtol_l.isra.0+0xc0>
 8007772:	d101      	bne.n	8007778 <_strtol_l.isra.0+0x9c>
 8007774:	45a2      	cmp	sl, r4
 8007776:	db11      	blt.n	800779c <_strtol_l.isra.0+0xc0>
 8007778:	fb00 4003 	mla	r0, r0, r3, r4
 800777c:	2201      	movs	r2, #1
 800777e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007782:	e7eb      	b.n	800775c <_strtol_l.isra.0+0x80>
 8007784:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007788:	2f19      	cmp	r7, #25
 800778a:	d801      	bhi.n	8007790 <_strtol_l.isra.0+0xb4>
 800778c:	3c37      	subs	r4, #55	@ 0x37
 800778e:	e7ea      	b.n	8007766 <_strtol_l.isra.0+0x8a>
 8007790:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007794:	2f19      	cmp	r7, #25
 8007796:	d804      	bhi.n	80077a2 <_strtol_l.isra.0+0xc6>
 8007798:	3c57      	subs	r4, #87	@ 0x57
 800779a:	e7e4      	b.n	8007766 <_strtol_l.isra.0+0x8a>
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	e7ed      	b.n	800777e <_strtol_l.isra.0+0xa2>
 80077a2:	1c53      	adds	r3, r2, #1
 80077a4:	d108      	bne.n	80077b8 <_strtol_l.isra.0+0xdc>
 80077a6:	2322      	movs	r3, #34	@ 0x22
 80077a8:	f8ce 3000 	str.w	r3, [lr]
 80077ac:	4660      	mov	r0, ip
 80077ae:	f1b8 0f00 	cmp.w	r8, #0
 80077b2:	d0a0      	beq.n	80076f6 <_strtol_l.isra.0+0x1a>
 80077b4:	1e69      	subs	r1, r5, #1
 80077b6:	e006      	b.n	80077c6 <_strtol_l.isra.0+0xea>
 80077b8:	b106      	cbz	r6, 80077bc <_strtol_l.isra.0+0xe0>
 80077ba:	4240      	negs	r0, r0
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	d099      	beq.n	80076f6 <_strtol_l.isra.0+0x1a>
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	d1f6      	bne.n	80077b4 <_strtol_l.isra.0+0xd8>
 80077c6:	f8c8 1000 	str.w	r1, [r8]
 80077ca:	e794      	b.n	80076f6 <_strtol_l.isra.0+0x1a>
 80077cc:	08007ac7 	.word	0x08007ac7

080077d0 <_strtol_r>:
 80077d0:	f7ff bf84 	b.w	80076dc <_strtol_l.isra.0>

080077d4 <_strtoul_l.isra.0>:
 80077d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4e34      	ldr	r6, [pc, #208]	@ (80078ac <_strtoul_l.isra.0+0xd8>)
 80077da:	4686      	mov	lr, r0
 80077dc:	460d      	mov	r5, r1
 80077de:	4628      	mov	r0, r5
 80077e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077e4:	5d37      	ldrb	r7, [r6, r4]
 80077e6:	f017 0708 	ands.w	r7, r7, #8
 80077ea:	d1f8      	bne.n	80077de <_strtoul_l.isra.0+0xa>
 80077ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80077ee:	d110      	bne.n	8007812 <_strtoul_l.isra.0+0x3e>
 80077f0:	782c      	ldrb	r4, [r5, #0]
 80077f2:	2701      	movs	r7, #1
 80077f4:	1c85      	adds	r5, r0, #2
 80077f6:	f033 0010 	bics.w	r0, r3, #16
 80077fa:	d115      	bne.n	8007828 <_strtoul_l.isra.0+0x54>
 80077fc:	2c30      	cmp	r4, #48	@ 0x30
 80077fe:	d10d      	bne.n	800781c <_strtoul_l.isra.0+0x48>
 8007800:	7828      	ldrb	r0, [r5, #0]
 8007802:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007806:	2858      	cmp	r0, #88	@ 0x58
 8007808:	d108      	bne.n	800781c <_strtoul_l.isra.0+0x48>
 800780a:	786c      	ldrb	r4, [r5, #1]
 800780c:	3502      	adds	r5, #2
 800780e:	2310      	movs	r3, #16
 8007810:	e00a      	b.n	8007828 <_strtoul_l.isra.0+0x54>
 8007812:	2c2b      	cmp	r4, #43	@ 0x2b
 8007814:	bf04      	itt	eq
 8007816:	782c      	ldrbeq	r4, [r5, #0]
 8007818:	1c85      	addeq	r5, r0, #2
 800781a:	e7ec      	b.n	80077f6 <_strtoul_l.isra.0+0x22>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f6      	bne.n	800780e <_strtoul_l.isra.0+0x3a>
 8007820:	2c30      	cmp	r4, #48	@ 0x30
 8007822:	bf14      	ite	ne
 8007824:	230a      	movne	r3, #10
 8007826:	2308      	moveq	r3, #8
 8007828:	f04f 38ff 	mov.w	r8, #4294967295
 800782c:	2600      	movs	r6, #0
 800782e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007832:	fb03 f908 	mul.w	r9, r3, r8
 8007836:	ea6f 0909 	mvn.w	r9, r9
 800783a:	4630      	mov	r0, r6
 800783c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007840:	f1bc 0f09 	cmp.w	ip, #9
 8007844:	d810      	bhi.n	8007868 <_strtoul_l.isra.0+0x94>
 8007846:	4664      	mov	r4, ip
 8007848:	42a3      	cmp	r3, r4
 800784a:	dd1e      	ble.n	800788a <_strtoul_l.isra.0+0xb6>
 800784c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007850:	d007      	beq.n	8007862 <_strtoul_l.isra.0+0x8e>
 8007852:	4580      	cmp	r8, r0
 8007854:	d316      	bcc.n	8007884 <_strtoul_l.isra.0+0xb0>
 8007856:	d101      	bne.n	800785c <_strtoul_l.isra.0+0x88>
 8007858:	45a1      	cmp	r9, r4
 800785a:	db13      	blt.n	8007884 <_strtoul_l.isra.0+0xb0>
 800785c:	fb00 4003 	mla	r0, r0, r3, r4
 8007860:	2601      	movs	r6, #1
 8007862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007866:	e7e9      	b.n	800783c <_strtoul_l.isra.0+0x68>
 8007868:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800786c:	f1bc 0f19 	cmp.w	ip, #25
 8007870:	d801      	bhi.n	8007876 <_strtoul_l.isra.0+0xa2>
 8007872:	3c37      	subs	r4, #55	@ 0x37
 8007874:	e7e8      	b.n	8007848 <_strtoul_l.isra.0+0x74>
 8007876:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800787a:	f1bc 0f19 	cmp.w	ip, #25
 800787e:	d804      	bhi.n	800788a <_strtoul_l.isra.0+0xb6>
 8007880:	3c57      	subs	r4, #87	@ 0x57
 8007882:	e7e1      	b.n	8007848 <_strtoul_l.isra.0+0x74>
 8007884:	f04f 36ff 	mov.w	r6, #4294967295
 8007888:	e7eb      	b.n	8007862 <_strtoul_l.isra.0+0x8e>
 800788a:	1c73      	adds	r3, r6, #1
 800788c:	d106      	bne.n	800789c <_strtoul_l.isra.0+0xc8>
 800788e:	2322      	movs	r3, #34	@ 0x22
 8007890:	f8ce 3000 	str.w	r3, [lr]
 8007894:	4630      	mov	r0, r6
 8007896:	b932      	cbnz	r2, 80078a6 <_strtoul_l.isra.0+0xd2>
 8007898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789c:	b107      	cbz	r7, 80078a0 <_strtoul_l.isra.0+0xcc>
 800789e:	4240      	negs	r0, r0
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	d0f9      	beq.n	8007898 <_strtoul_l.isra.0+0xc4>
 80078a4:	b106      	cbz	r6, 80078a8 <_strtoul_l.isra.0+0xd4>
 80078a6:	1e69      	subs	r1, r5, #1
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	e7f5      	b.n	8007898 <_strtoul_l.isra.0+0xc4>
 80078ac:	08007ac7 	.word	0x08007ac7

080078b0 <_strtoul_r>:
 80078b0:	f7ff bf90 	b.w	80077d4 <_strtoul_l.isra.0>

080078b4 <_malloc_usable_size_r>:
 80078b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b8:	1f18      	subs	r0, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfbc      	itt	lt
 80078be:	580b      	ldrlt	r3, [r1, r0]
 80078c0:	18c0      	addlt	r0, r0, r3
 80078c2:	4770      	bx	lr

080078c4 <_init>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr

080078d0 <_fini>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr
